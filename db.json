{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fa9d6db13bb07dea025fba81f94418914c924e06","modified":1686712071745},{"_id":"source/_posts/C语言/C-C示例程序及解释.md","hash":"b511fcaf63f59f616f79513f4130b043d3beb5d5","modified":1686712071748},{"_id":"source/about/index.md","hash":"15fd98bb971073e35651ad090ca87bed9b17b695","modified":1686712071760},{"_id":"source/_posts/C语言/C-C Primer Plus 练习程序.md","hash":"c3a846483cc997973d47a2c60aaf1e9a5f4f5c30","modified":1686712071747},{"_id":"source/_posts/C语言/C-C Primer Plus 示例程序.md","hash":"d6711d20cad2fb58e12721dd6d2e19793946d938","modified":1686712071746},{"_id":"source/_posts/Git/Git-一份代码同时提交两个仓库.md","hash":"1766d4224e4f58b04ab1c90091142986392137f2","modified":1686712071748},{"_id":"source/_posts/Hexo/Hexo-分类管理md文件.md","hash":"81321394dbf7bc4e0873bfd39a2557127801c443","modified":1686712071750},{"_id":"source/_posts/Hexo/Hexo-数据备份.md","hash":"541cb0da85d6cdbbd8c5ff616c56b153d4e967f9","modified":1686712071750},{"_id":"source/_posts/Hexo/七牛云备份.md","hash":"3db5253f1880a5051bba4f21ba6f434ca19579f0","modified":1686712071752},{"_id":"source/_posts/Hexo/Hexo-添加看板娘.md","hash":"27c21a125f0a3042a6c266ccfb44976b0c2146e0","modified":1686712071751},{"_id":"source/_posts/Jenkins/Jenkins-Gitlab构建配置.md","hash":"8af5a5696bf25dfd62bff27dfb540e105c7d5c7e","modified":1686712071752},{"_id":"source/_posts/Jenkins/Jenkins-模版.md","hash":"b82757b2c3ae3bd327c4abc2a8aa9d4ade0acf7b","modified":1686712071753},{"_id":"source/_posts/Jenkins/Jenkins-远程构建配置.md","hash":"8e97ec3219d493963983e0688481009348267080","modified":1686712071754},{"_id":"source/_posts/Jenkins/Jenkins-重置管理员密码.md","hash":"e326b047d21b9bb31cc9703a30359878545d08eb","modified":1686712071754},{"_id":"source/_posts/Gitlab/Gitlab-重置管理员密码.md","hash":"d485e4edfc7deb508d9e760f3b7ddea034be7223","modified":1686712071749},{"_id":"source/_posts/Linux/Ubuntu-换源.md","hash":"2f23bb75163dd4e672997ff683847fe68c2b3af9","modified":1686712071755},{"_id":"source/_posts/Linux/Ubuntu-离线安装包.md","hash":"6d991b26d519d329b4be2239dcb50ae993f6b614","modified":1686712071756},{"_id":"source/_posts/2023/06/post-2.md","hash":"815fd962e4212d3c94fc0b979ccf4fa93ab22967","modified":1686713527667},{"_id":"source/_posts/VSCode/VSCode-设置.md","hash":"c7803d21f271b1e5586f6344c91941155653bde9","modified":1686712071757},{"_id":"source/_posts/思考/散落的知识如何归化.md","hash":"107f45a75099bd0d351031201ddc40977c7e7f19","modified":1686712071758},{"_id":"source/_posts/2023/06/post-3.md","hash":"6f271285f72c89d79f05d2ca6b9be00e84158ede","modified":1686713535410},{"_id":"source/_posts/2023/06/post.md","hash":"8d67d79d020f2664aa6f51c6336e09684376410e","modified":1686713495339},{"_id":"source/_posts/2023/06/post-1.md","hash":"92618d39649a4ed8911b9dd06e8daedf4ff42185","modified":1686713514746},{"_id":"source/_posts/2023/06/post-4.md","hash":"2e34c8ac2b72e2cab8b68afabd74e860cbfd13c4","modified":1686713630288},{"_id":"source/_posts/2023/06/post-5.md","hash":"f3cdf16011d077f550dc5436d785d9e87efd3d00","modified":1686713636243},{"_id":"source/_posts/游戏/塞尔达王国之泪/王国之泪-龙之泪收集.md","hash":"00e14be6f5e15588a020e9fd2544750c1883cc65","modified":1686712071759},{"_id":"themes/3-hexo/README.md","hash":"19b8cfe6690c28427492f342e74dda5ed49a1664","modified":1686712071762},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1686712071762},{"_id":"themes/3-hexo/languages/en.yml","hash":"616e02c035c86033ab4a97c5ae9e0a9e5f0b8ea3","modified":1686712071764},{"_id":"themes/3-hexo/_config.yml","hash":"29b4795a20dffb48985f1eb984f88b4ec348abda","modified":1686712071763},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"83633d45420c96dfac41333aeac3f3616dca5286","modified":1686712071765},{"_id":"themes/3-hexo/layout/post.ejs","hash":"eaa0674d692a08c851982e9e06af0da791d9173c","modified":1686712071782},{"_id":"themes/3-hexo/layout/indexs.md","hash":"0c354c2370dc0ad681086a9441297c262cd3b7e1","modified":1686712071781},{"_id":"themes/3-hexo/layout/index.ejs","hash":"c9f4b83eba770c3dfbf27ddf9aed3205add2fb26","modified":1686712071780},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"1c2f8b7d7cf46f219adb3a628bdf380f29ff4a6b","modified":1686712071810},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1686712071799},{"_id":"themes/3-hexo/source/css/style.styl","hash":"29fa7f6619519c2dcfec4efac4314c5af659a92a","modified":1686712071811},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1686712071812},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1686712071813},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1686712071815},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1686712071815},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1686712071816},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1686712071827},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1686712071828},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1686712071830},{"_id":"themes/3-hexo/source/js/script.js","hash":"2bab19a8e2f1529fe19931068945874f670488f7","modified":1686712071829},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"7299ac046ddd6e6a4267d435f7b4c8198baaaccc","modified":1686712071831},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"9e5afcc26f47f93c165072b0a2b5cbf72efb7ef9","modified":1686712071766},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"9e1cdec49d5b9b44399348d96ecd7331f3ee7d85","modified":1686712071767},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"4c09f47e899fe36bfe36d92b12996219c2b5f622","modified":1686712071772},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1686712071767},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"b2a01cc1f0326965f0a186ce3c9b3c991fd4e2c9","modified":1686712071773},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"9087af9647a87c3fa9ef87632de5427ba4abe9c4","modified":1686712071774},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"60a085fab3165ea1fc6370abac0bd6ab1b2f2510","modified":1686712071775},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"233c7238136b9cc2c30fd4e66b113d8fd1c1726b","modified":1686712071776},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"e6dd90be668195016d6e1c51a6baefb50676e6ab","modified":1686712071774},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1686712071777},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"0c693379995b09007727c2889c1a64e3bf98749e","modified":1686712071778},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"f3cc395fbb4e308776a38e369faefbc9e5891807","modified":1686712071778},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"8704e6bd833d270cc6a494d4e7cf1dfeddedba40","modified":1686712071779},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ab6329ddd908b0567c18f39ac6a8553c6fec67c5","modified":1686712071777},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1686712071780},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1686712071784},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"d5fa333970a2eac66937d42eeb16fdb362e121ed","modified":1686712071783},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1686712071784},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"3db01e603985e6dbcacb6b0f13dbd804f5849e3c","modified":1686712071785},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"9a732af065d0a80c9e420934be0f3582bf0129dc","modified":1686712071786},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"4304a111489d22a97389e0403c51bb4de73f6609","modified":1686712071786},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1686712071787},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"588b75e3b83ed95e526154bf3c0336c6f33e2be7","modified":1686712071787},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1686712071789},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"f1251e2a3b5334af3a22b51fc0293c2456568b50","modified":1686712071790},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1686712071790},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1686712071791},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1686712071792},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1686712071793},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1686712071793},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1686712071795},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1686712071794},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1686712071797},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1686712071798},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1686712071801},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1686712071800},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1686712071798},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1686712071801},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1686712071802},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1686712071803},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1686712071804},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1686712071804},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1686712071805},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1686712071805},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1686712071806},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1686712071806},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1686712071808},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1686712071807},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1686712071809},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1686712071809},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1686712071808},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"05b09c45b379ffeb4f48c1604044d88829f90799","modified":1686712071768},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1686712071769},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1686712071770},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1686712071770},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"8f2d4f42fbad351677c82e72420224587a5bd666","modified":1686712071772},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"2d115e79cadedc2d5d8f4b5618559640d986e01f","modified":1686712071771},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"cea2648490b69be800f14025ca2f50a878e7a9f9","modified":1686712071814},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1686712071818},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1686712071825},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"3e2e0cf9caa6b8d07b9c5e0733a1ccb3e244259f","modified":1686712071822},{"_id":"public/about/index.html","hash":"cb12b16268a809a0ff7b73bb4a726624e4293d05","modified":1686713707378},{"_id":"public/2023/06/14/post-5/index.html","hash":"2e5d451024eed9a76422fdc42280efaf8e139bfd","modified":1686713707378},{"_id":"public/2023/06/14/post-4/index.html","hash":"6f8386a187f8495ba2e9db38395ee80881d006f8","modified":1686713707378},{"_id":"public/2023/06/14/post-3/index.html","hash":"d39403276d2dd1fd1c2627190bc34ac6144b0572","modified":1686713707378},{"_id":"public/2023/06/14/post-2/index.html","hash":"7b5e3a5747dc6878f42fd05e17b45e113a127972","modified":1686713707378},{"_id":"public/2023/06/14/post-1/index.html","hash":"90400c45bd87b9badc7d3f1a86d2274ec829baaf","modified":1686713707378},{"_id":"public/2023/06/14/post/index.html","hash":"6d6504b94458a1b61aa75fb927811100a629b21f","modified":1686713707378},{"_id":"public/2023/05/31/游戏-塞尔达王国之泪-王国之泪-龙之泪收集/index.html","hash":"37438ee7b414c1ba1fc07164a26fd0fda10e84d9","modified":1686713707378},{"_id":"public/2023/05/30/C语言-C-C-Primer-Plus-练习程序/index.html","hash":"0b7c1513f0bdd006895bc3dc6f6dcaef7580d1ac","modified":1686713707378},{"_id":"public/2023/05/30/Linux-Ubuntu-离线安装包/index.html","hash":"4c90605dcdc0eb24803ec7eccc6faa3ec248d6d8","modified":1686713707378},{"_id":"public/2023/05/30/Linux-Ubuntu-换源/index.html","hash":"3fac71868cecf83a90c074bcd31d7ed048ad3270","modified":1686713707378},{"_id":"public/2023/05/27/C语言-C-C-Primer-Plus-示例程序/index.html","hash":"9be48af98bced0a993c2776e18cbc3b012b29760","modified":1686713707378},{"_id":"public/2023/05/27/C语言-C-C示例程序及解释/index.html","hash":"ec1766541b9dd0eb0f92c1677b5cec6adfe4dc51","modified":1686713707378},{"_id":"public/2023/05/26/Hexo-七牛云备份/index.html","hash":"e9a86fd76e8dae32a03df220f4a31ca064e756b5","modified":1686713707378},{"_id":"public/2023/05/25/Hexo-Hexo-数据备份/index.html","hash":"4447c878d4546795bbec42cd32781142276dbda9","modified":1686713707378},{"_id":"public/2023/05/25/Hexo-Hexo-添加看板娘/index.html","hash":"4202462df6fd916046c8f077b5e445044fd1c32a","modified":1686713707378},{"_id":"public/2023/05/25/Gitlab-Gitlab-重置管理员密码/index.html","hash":"a69b3a6a3ad0a02e1c104a6b595763bdc05ddf59","modified":1686713707378},{"_id":"public/2023/05/25/VSCode-VSCode-设置/index.html","hash":"aa1aa1446a9d1e4feac16e936f5aafb5273f4d6c","modified":1686713707378},{"_id":"public/2023/05/25/Hexo-Hexo-分类管理md文件/index.html","hash":"217cb87a2f100230d19b1094388a12b3e953291b","modified":1686713707378},{"_id":"public/2023/05/25/思考-散落的知识如何归化/index.html","hash":"3ce4c16e1ffd89bc3d7aa22b34ae2ae2509e0a14","modified":1686713707378},{"_id":"public/2023/05/25/Jenkins-Jenkins-Gitlab构建配置/index.html","hash":"0db1ad2dd8b07d8e82ecad1909bdaa40adbcdcf7","modified":1686713707378},{"_id":"public/2023/05/25/Jenkins-Jenkins-模版/index.html","hash":"00783b536a2e641f7cb37f8c5ab9c7334f83a912","modified":1686713707378},{"_id":"public/2023/05/25/Jenkins-Jenkins-远程构建配置/index.html","hash":"bd6e0f572852df6e4ddcedf50e6cfafc233495bc","modified":1686713707378},{"_id":"public/2023/05/25/Jenkins-Jenkins-重置管理员密码/index.html","hash":"066742f11a0e110ac59cce436b045c42d4103f6b","modified":1686713707378},{"_id":"public/2023/05/25/Git-Git-一份代码同时提交两个仓库/index.html","hash":"d8023b10de6e158e4e9d12634f02e42100203110","modified":1686713707378},{"_id":"public/archives/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/page/2/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/page/3/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/page/2/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/page/3/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/05/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/05/page/2/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/archives/2023/06/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/编程语言/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/page/2/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/编程语言/C/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/Hexo/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/Git/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/Jenkins/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/系统/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/思考/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/Gitlab/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/工具/VSCode/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/游戏/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/categories/系统/Linux/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/page/2/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/page/3/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/C/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/Git/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/hexo/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/Hexo/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/Jenkins/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/Gitlab/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/Ubuntu/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/3-hexo/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/思考/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/VSCode/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/王国之泪/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/tags/游戏攻略/index.html","hash":"5d7f41c14e5ef8255ba160e742400726e0f6cebb","modified":1686713707378},{"_id":"public/CNAME","hash":"fa9d6db13bb07dea025fba81f94418914c924e06","modified":1686713707378},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1686713707378},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1686713707378},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1686713707378},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1686713707378},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1686713707378},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1686713707378},{"_id":"public/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1686713707378},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1686713707378},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1686713707378},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1686713707378},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1686713707378},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1686713707378},{"_id":"public/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1686713707378},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1686713707378},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1686713707378},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1686713707378},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1686713707378},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1686713707378},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1686713707378},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1686713707378},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1686713707378},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1686713707378},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1686713707378},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1686713707378},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1686713707378},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1686713707378},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1686713707378},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1686713707378},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1686713707378},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1686713707378},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1686713707378},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1686713707378},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1686713707378},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1686713707378},{"_id":"public/css/style.css","hash":"6d86fbf04335cab51ee86d74d631fc18c96c8d9f","modified":1686713707378},{"_id":"public/js/script.js","hash":"f261fb46d822e9b89296c454a965ff34e4b244f9","modified":1686713707378},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1686713707378},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1686713707378},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1686713707378},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1686713707378},{"_id":"public/img/avatar.jpg","hash":"cea2648490b69be800f14025ca2f50a878e7a9f9","modified":1686713707378},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1686713707378},{"_id":"public/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1686713707378}],"Category":[{"name":"编程语言","_id":"cliv5sias0003m0t59wpk5zg2"},{"name":"工具","_id":"cliv5siav0008m0t5hgdhddak"},{"name":"C","parent":"cliv5sias0003m0t59wpk5zg2","_id":"cliv5sib1000km0t51akta1of"},{"name":"Hexo","parent":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sib60012m0t5565dbpsn"},{"name":"Git","parent":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sib8001am0t55xxifszq"},{"name":"Jenkins","parent":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibg0021m0t541kqgrxv"},{"name":"Gitlab","parent":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibk002lm0t5fvms3t57"},{"name":"系统","_id":"cliv5sibl002rm0t54rtzcj7z"},{"name":"思考","_id":"cliv5sibm0032m0t5d4pg49jr"},{"name":"VSCode","parent":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibn0039m0t510ub05yc"},{"name":"游戏","_id":"cliv5sibo003gm0t543kb2dsd"},{"name":"Linux","parent":"cliv5sibl002rm0t54rtzcj7z","_id":"cliv5sibp003mm0t5ed23584e"}],"Data":[],"Page":[{"title":"about","date":"2023-05-24T09:54:48.000Z","_content":"\n神乐g —— 不入流程序员👨🏻‍💻\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-05-24 17:54:48\n---\n\n神乐g —— 不入流程序员👨🏻‍💻\n","updated":"2023-06-14T03:07:51.760Z","path":"about/index.html","comments":1,"layout":"page","_id":"cliv5sial0000m0t5f6qe31tw","content":"<p>神乐g —— 不入流程序员👨🏻‍💻</p>\n","site":{"data":{}},"excerpt":"","more":"<p>神乐g —— 不入流程序员👨🏻‍💻</p>\n"}],"Post":[{"title":"C-C Primer Plus 示例程序","date":"2023-05-27T04:35:41.000Z","_content":"\n# 第2章 C语言概述\n\n## first.c\n\n```c\n// 示例程序\n#include <stdio.h>\n\nint main(void) {\n    int num;  // 定义变量\n    num = 1;  // 给变量赋值\n\n    printf(\"I am a simple \");  // 调用函数，输出字符串\n    printf(\"computer.\\n\");  // 输出占位符\n    printf(\"My favorite number is %d because it is first. \\n\", num);  // 占位符输出 \n\n    return 0;  // 返回值\n}\n```\n\n输出：\n\n```\nI am a simple computer.\nMy favorite number is 1 because it is first. \n```\n\n\n\n## fathm_ft.c\n\n单位转换\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int feet, fathoms;\n    fathoms = 2;\n    feet = 6 * fathoms;\n\n    printf(\"There ara %d feet in %d fathoms!\\n\", feet, fathoms);\n    printf(\"Yes, I said %d feet!\\n\", 6 * fathoms);  // 待打印值可以是表达式\n\n    return 0;\n}\n```\n\n输出：\n\n```\nThere ara 12 feet in 2 fathoms!\nYes, I said 12 feet!\n```\n\n\n\n## tow_func.c\n\n包含多个函数\n\n```c\n#include <stdio.h>\n\nvoid butler(void); // 声明函数原型，告知编译器要使用该函数\n\nint main(void) {\n    printf(\"I will summon the butler function.\\n\");\n    butler();\n    printf(\"Yes. Bring me some tea and writeable DVDs. \\n\");\n\n    return 0;\n}\n\n// 开始定义函数\nvoid butler(void) {\n    printf(\"You rang, sir?\\n\");\n}\n```\n\n输出：\n\n```\nI will summon the butler function.\nYou rang, sir?\nYes. Bring me some tea and writeable DVDs. \n```\n\n# 第3章 数据和C\n\n## platium.c\n\n`scanf()` 函数引入，读取程序输入\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float weight;\n    float value;\n\n    printf(\"Are you worth your weight in platinum?\\n\");\n    printf(\"Let's check it out.\\n\");\n    printf(\"Please enter your weight in pounds: \");\n\n    scanf(\"%f\", &weight);\n    value = 1700.0 * weight * 14.5833;\n    printf(\"Your weight in platinum is worth $%.2f.\\n\", value);\n    printf(\"You are easily worth that! If platinum prices drop,\\n\");\n    printf(\"eat more to maintain your value.\\n\");\n\n    return 0;\n}\n```\n\n## printl.c\n\n占位符不够会输出内存值\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int ten = 10;\n    int two = 2;\n\n    printf(\"Doing it right: \");\n    printf(\"%d minus %d is %d\\n\", ten, 2, ten - two);\n    printf(\"Doing it wrong: \");\n    printf(\"%d minus %d is %d\\n\", ten);  // 遗漏 2 个参数，输出内存值（随机）\n\n    return 0;\n}\n```\n\n输出\n\n```\nDoing it right: 10 minus 2 is 8\nDoing it wrong: 10 minus 0 is 52232400\n```\n\n## bases.c\n\n不同进制的显示\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int x = 100;\n\n    printf(\"dec = %d; octal = %o; hex = %x\\n\", x, x, x);\n    printf(\"dec = %d; octal = %#o; hex = %#x\\n\", x, x, x);\n\n    return 0;\n}\n```\n\n输出\n\n```\ndec = 100; octal = 144; hex = 64\ndec = 100; octal = 0144; hex = 0x64\n```\n\n## 3.5 charcode.c\n\nchar 类型的打印\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    char ch;\n\n    printf(\"Please enter a character.\\n\");\n    scanf(\"%c\", &ch);\n    // 占位符决定了变量的显示形式，而不是存储方式\n    printf(\"The code for %c is %d.\\n\", ch, ch);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease enter a character.\na\nThe code for a is 97.\n```\n\n## 3.8 typesize.c\n\nsizeof() 函数可以打印类型大小\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Type char has a size of %zd bytes.\\n\", sizeof(char));\n    printf(\"Type short has a size of %zd bytes.\\n\", sizeof(short));\n    printf(\"Type int has a size of %zd bytes.\\n\", sizeof(int));\n    printf(\"Type long has a size of %zd bytes.\\n\", sizeof(long));\n    printf(\"Type long long has a size of %zd bytes.\\n\", sizeof(long long));\n    printf(\"Type _Bool long has a size of %zd bytes.\\n\", sizeof(_Bool));\n    printf(\"Type float long has a size of %zd bytes.\\n\", sizeof(float));\n    printf(\"Type double long has a size of %zd bytes.\\n\", sizeof(double));\n    printf(\"Type long double long has a size of %zd bytes.\\n\", sizeof(long double));\n\n    return 0;\n}\n```\n\n输出\n\n```\nType char has a size of 1 bytes.\nType short has a size of 2 bytes.\nType int has a size of 4 bytes.\nType long has a size of 8 bytes.\nType long long has a size of 8 bytes.\nType _Bool long has a size of 1 bytes.\nType float long has a size of 4 bytes.\nType double long has a size of 8 bytes.\nType long double long has a size of 16 bytes.\n```\n\n# 第4章 字符串和格式化输入/输出\n\n## 4.1 talkback.c\n\n字符串输入和输出\n\n```c\n#include <stdio.h>\n#include <string.h>  // 提供 strlen() 函数原型\n#define DENSITY 62.4f  // 定义常量\n\nint main(void) {\n    float weight, volume;\n    int size, letters;\n    char name[40];  // 定义数组\n\n    printf(\"Hi! What's your first name?\\n\");\n    scanf(\"%s\", name);\n    printf(\"%s, what's your weight in pounds?\\n\", name);\n    scanf(\"%f\", &weight);\n    size = sizeof name;\n    letters = strlen(name);\n    volume = weight/DENSITY;\n    printf(\"Well, %s, your volume is %2.2f cubic feet.\\n\",\n           name, volume);\n    printf(\"Also, your first name has %d letters, \\n\", letters);\n    printf(\"and we have %d bytes to store it.\\n\", size);\n\n    return 0;\n}\n```\n\n输出\n\n```\nHi! What's your first name?\nChristine\nChristine, what's your weight in pounds?\n154\nWell, Christine, your volume is 2.47 cubic feet.\nAlso, your first name has 9 letters, \nand we have 40 bytes to store it.\n```\n\n## 4.3 praise2.c\n\n验证字符串占用\n\n```c\n#include <stdio.h>\n#include <string.h>  // 提供 strlen() 函数原型\n#define PRAISE \"You are an extraordinary being.\"  // 自动计算大小\n\nint main(void) {\n    char name[40];\n\n    printf(\"What's your name? \");\n    scanf(\"%s\", name);\n    printf(\"Hello, %s. %s\\n\", name, PRAISE);\n    printf(\"Your name of %zd letters occupies %zd memory cells.\\n\", \n           strlen(name), sizeof(name));\n    printf(\"The phrase of praise has %zd letters \", strlen(PRAISE));\n    printf(\"and occupies %zd memory cells.\\n\", sizeof(PRAISE));\n\n    return 0;\n}\n```\n\n输出\n\n```\nWhat's your name? Serendipity Chance\nHello, Serendipity. You are an extraordinary being.\nYour name of 11 letters occupies 40 memory cells.\nThe phrase of praise has 31 letters and occupies 32 memory cells.\n```\n\n## 4.7 width.c\n\n输出修饰符\n\n```c\n#include <stdio.h>\n#define PAGES 959\n\nint main(void) {\n    printf(\"*%d*\\n\", PAGES);\n    printf(\"*%2d*\\n\", PAGES);  // 不够会扩大\n    printf(\"*%10d*\\n\", PAGES);  // 够会填充空格\n    printf(\"*%010d*\\n\", PAGES);  // 0 填充\n    printf(\"*%-10d*\\n\", PAGES);  // - 填充\n    printf(\"*%+10d*\\n\", PAGES);  // 显示正负号\n\n    return 0;\n}\n```\n\n输出\n\n```\n*959*\n*959*\n*       959*\n*0000000959*\n*959       *\n*      +959*\n```\n\n## 4.8 floats.c\n\n输出修饰符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    const double RENT = 3852.99;\n\n    printf(\"*%f*\\n\", RENT);  // 默认精度6\n    printf(\"*%e*\\n\", RENT);  // 科学计数法，默认精度6\n    printf(\"*%4.2f*\\n\", RENT);  // 自定精度\n    printf(\"*%3.1f*\\n\", RENT);  // 自定精度，四舍五入\n    printf(\"*%g*\\n\", RENT);  // 自动确定显示模式\n    printf(\"*%10.3f*\\n\", RENT);  // 自定宽度\n    printf(\"*%10.3E*\\n\", RENT);\n    printf(\"*%+4.2f*\\n\", RENT);\n    printf(\"*%010.2f*\\n\", RENT);\n\n    return 0;\n}\n```\n\n输出\n\n```\n*3852.990000*\n*3.852990e+03*\n*3852.99*\n*3853.0*\n*3852.99*\n*  3852.990*\n* 3.853E+03*\n*+3852.99*\n*0003852.99*\n```\n\n","source":"_posts/C语言/C-C Primer Plus 示例程序.md","raw":"---\ntitle: C-C Primer Plus 示例程序\ncategories:\n  - 编程语言\n  - C\ntags:\n  - C\ndate: 2023-05-27 12:35:41\n---\n\n# 第2章 C语言概述\n\n## first.c\n\n```c\n// 示例程序\n#include <stdio.h>\n\nint main(void) {\n    int num;  // 定义变量\n    num = 1;  // 给变量赋值\n\n    printf(\"I am a simple \");  // 调用函数，输出字符串\n    printf(\"computer.\\n\");  // 输出占位符\n    printf(\"My favorite number is %d because it is first. \\n\", num);  // 占位符输出 \n\n    return 0;  // 返回值\n}\n```\n\n输出：\n\n```\nI am a simple computer.\nMy favorite number is 1 because it is first. \n```\n\n\n\n## fathm_ft.c\n\n单位转换\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int feet, fathoms;\n    fathoms = 2;\n    feet = 6 * fathoms;\n\n    printf(\"There ara %d feet in %d fathoms!\\n\", feet, fathoms);\n    printf(\"Yes, I said %d feet!\\n\", 6 * fathoms);  // 待打印值可以是表达式\n\n    return 0;\n}\n```\n\n输出：\n\n```\nThere ara 12 feet in 2 fathoms!\nYes, I said 12 feet!\n```\n\n\n\n## tow_func.c\n\n包含多个函数\n\n```c\n#include <stdio.h>\n\nvoid butler(void); // 声明函数原型，告知编译器要使用该函数\n\nint main(void) {\n    printf(\"I will summon the butler function.\\n\");\n    butler();\n    printf(\"Yes. Bring me some tea and writeable DVDs. \\n\");\n\n    return 0;\n}\n\n// 开始定义函数\nvoid butler(void) {\n    printf(\"You rang, sir?\\n\");\n}\n```\n\n输出：\n\n```\nI will summon the butler function.\nYou rang, sir?\nYes. Bring me some tea and writeable DVDs. \n```\n\n# 第3章 数据和C\n\n## platium.c\n\n`scanf()` 函数引入，读取程序输入\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float weight;\n    float value;\n\n    printf(\"Are you worth your weight in platinum?\\n\");\n    printf(\"Let's check it out.\\n\");\n    printf(\"Please enter your weight in pounds: \");\n\n    scanf(\"%f\", &weight);\n    value = 1700.0 * weight * 14.5833;\n    printf(\"Your weight in platinum is worth $%.2f.\\n\", value);\n    printf(\"You are easily worth that! If platinum prices drop,\\n\");\n    printf(\"eat more to maintain your value.\\n\");\n\n    return 0;\n}\n```\n\n## printl.c\n\n占位符不够会输出内存值\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int ten = 10;\n    int two = 2;\n\n    printf(\"Doing it right: \");\n    printf(\"%d minus %d is %d\\n\", ten, 2, ten - two);\n    printf(\"Doing it wrong: \");\n    printf(\"%d minus %d is %d\\n\", ten);  // 遗漏 2 个参数，输出内存值（随机）\n\n    return 0;\n}\n```\n\n输出\n\n```\nDoing it right: 10 minus 2 is 8\nDoing it wrong: 10 minus 0 is 52232400\n```\n\n## bases.c\n\n不同进制的显示\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int x = 100;\n\n    printf(\"dec = %d; octal = %o; hex = %x\\n\", x, x, x);\n    printf(\"dec = %d; octal = %#o; hex = %#x\\n\", x, x, x);\n\n    return 0;\n}\n```\n\n输出\n\n```\ndec = 100; octal = 144; hex = 64\ndec = 100; octal = 0144; hex = 0x64\n```\n\n## 3.5 charcode.c\n\nchar 类型的打印\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    char ch;\n\n    printf(\"Please enter a character.\\n\");\n    scanf(\"%c\", &ch);\n    // 占位符决定了变量的显示形式，而不是存储方式\n    printf(\"The code for %c is %d.\\n\", ch, ch);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease enter a character.\na\nThe code for a is 97.\n```\n\n## 3.8 typesize.c\n\nsizeof() 函数可以打印类型大小\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Type char has a size of %zd bytes.\\n\", sizeof(char));\n    printf(\"Type short has a size of %zd bytes.\\n\", sizeof(short));\n    printf(\"Type int has a size of %zd bytes.\\n\", sizeof(int));\n    printf(\"Type long has a size of %zd bytes.\\n\", sizeof(long));\n    printf(\"Type long long has a size of %zd bytes.\\n\", sizeof(long long));\n    printf(\"Type _Bool long has a size of %zd bytes.\\n\", sizeof(_Bool));\n    printf(\"Type float long has a size of %zd bytes.\\n\", sizeof(float));\n    printf(\"Type double long has a size of %zd bytes.\\n\", sizeof(double));\n    printf(\"Type long double long has a size of %zd bytes.\\n\", sizeof(long double));\n\n    return 0;\n}\n```\n\n输出\n\n```\nType char has a size of 1 bytes.\nType short has a size of 2 bytes.\nType int has a size of 4 bytes.\nType long has a size of 8 bytes.\nType long long has a size of 8 bytes.\nType _Bool long has a size of 1 bytes.\nType float long has a size of 4 bytes.\nType double long has a size of 8 bytes.\nType long double long has a size of 16 bytes.\n```\n\n# 第4章 字符串和格式化输入/输出\n\n## 4.1 talkback.c\n\n字符串输入和输出\n\n```c\n#include <stdio.h>\n#include <string.h>  // 提供 strlen() 函数原型\n#define DENSITY 62.4f  // 定义常量\n\nint main(void) {\n    float weight, volume;\n    int size, letters;\n    char name[40];  // 定义数组\n\n    printf(\"Hi! What's your first name?\\n\");\n    scanf(\"%s\", name);\n    printf(\"%s, what's your weight in pounds?\\n\", name);\n    scanf(\"%f\", &weight);\n    size = sizeof name;\n    letters = strlen(name);\n    volume = weight/DENSITY;\n    printf(\"Well, %s, your volume is %2.2f cubic feet.\\n\",\n           name, volume);\n    printf(\"Also, your first name has %d letters, \\n\", letters);\n    printf(\"and we have %d bytes to store it.\\n\", size);\n\n    return 0;\n}\n```\n\n输出\n\n```\nHi! What's your first name?\nChristine\nChristine, what's your weight in pounds?\n154\nWell, Christine, your volume is 2.47 cubic feet.\nAlso, your first name has 9 letters, \nand we have 40 bytes to store it.\n```\n\n## 4.3 praise2.c\n\n验证字符串占用\n\n```c\n#include <stdio.h>\n#include <string.h>  // 提供 strlen() 函数原型\n#define PRAISE \"You are an extraordinary being.\"  // 自动计算大小\n\nint main(void) {\n    char name[40];\n\n    printf(\"What's your name? \");\n    scanf(\"%s\", name);\n    printf(\"Hello, %s. %s\\n\", name, PRAISE);\n    printf(\"Your name of %zd letters occupies %zd memory cells.\\n\", \n           strlen(name), sizeof(name));\n    printf(\"The phrase of praise has %zd letters \", strlen(PRAISE));\n    printf(\"and occupies %zd memory cells.\\n\", sizeof(PRAISE));\n\n    return 0;\n}\n```\n\n输出\n\n```\nWhat's your name? Serendipity Chance\nHello, Serendipity. You are an extraordinary being.\nYour name of 11 letters occupies 40 memory cells.\nThe phrase of praise has 31 letters and occupies 32 memory cells.\n```\n\n## 4.7 width.c\n\n输出修饰符\n\n```c\n#include <stdio.h>\n#define PAGES 959\n\nint main(void) {\n    printf(\"*%d*\\n\", PAGES);\n    printf(\"*%2d*\\n\", PAGES);  // 不够会扩大\n    printf(\"*%10d*\\n\", PAGES);  // 够会填充空格\n    printf(\"*%010d*\\n\", PAGES);  // 0 填充\n    printf(\"*%-10d*\\n\", PAGES);  // - 填充\n    printf(\"*%+10d*\\n\", PAGES);  // 显示正负号\n\n    return 0;\n}\n```\n\n输出\n\n```\n*959*\n*959*\n*       959*\n*0000000959*\n*959       *\n*      +959*\n```\n\n## 4.8 floats.c\n\n输出修饰符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    const double RENT = 3852.99;\n\n    printf(\"*%f*\\n\", RENT);  // 默认精度6\n    printf(\"*%e*\\n\", RENT);  // 科学计数法，默认精度6\n    printf(\"*%4.2f*\\n\", RENT);  // 自定精度\n    printf(\"*%3.1f*\\n\", RENT);  // 自定精度，四舍五入\n    printf(\"*%g*\\n\", RENT);  // 自动确定显示模式\n    printf(\"*%10.3f*\\n\", RENT);  // 自定宽度\n    printf(\"*%10.3E*\\n\", RENT);\n    printf(\"*%+4.2f*\\n\", RENT);\n    printf(\"*%010.2f*\\n\", RENT);\n\n    return 0;\n}\n```\n\n输出\n\n```\n*3852.990000*\n*3.852990e+03*\n*3852.99*\n*3853.0*\n*3852.99*\n*  3852.990*\n* 3.853E+03*\n*+3852.99*\n*0003852.99*\n```\n\n","slug":"C语言-C-C-Primer-Plus-示例程序","published":1,"updated":"2023-06-14T03:07:51.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siao0001m0t58b8kca9h","content":"<h1 id=\"第2章-C语言概述\"><a href=\"#第2章-C语言概述\" class=\"headerlink\" title=\"第2章 C语言概述\"></a>第2章 C语言概述</h1><h2 id=\"first-c\"><a href=\"#first-c\" class=\"headerlink\" title=\"first.c\"></a>first.c</h2><pre><code class=\"c\">// 示例程序\n#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;  // 定义变量\n    num = 1;  // 给变量赋值\n\n    printf(&quot;I am a simple &quot;);  // 调用函数，输出字符串\n    printf(&quot;computer.\\n&quot;);  // 输出占位符\n    printf(&quot;My favorite number is %d because it is first. \\n&quot;, num);  // 占位符输出 \n\n    return 0;  // 返回值\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I am a simple computer.\nMy favorite number is 1 because it is first. \n</code></pre>\n<h2 id=\"fathm-ft-c\"><a href=\"#fathm-ft-c\" class=\"headerlink\" title=\"fathm_ft.c\"></a>fathm_ft.c</h2><p>单位转换</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int feet, fathoms;\n    fathoms = 2;\n    feet = 6 * fathoms;\n\n    printf(&quot;There ara %d feet in %d fathoms!\\n&quot;, feet, fathoms);\n    printf(&quot;Yes, I said %d feet!\\n&quot;, 6 * fathoms);  // 待打印值可以是表达式\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>There ara 12 feet in 2 fathoms!\nYes, I said 12 feet!\n</code></pre>\n<h2 id=\"tow-func-c\"><a href=\"#tow-func-c\" class=\"headerlink\" title=\"tow_func.c\"></a>tow_func.c</h2><p>包含多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid butler(void); // 声明函数原型，告知编译器要使用该函数\n\nint main(void) &#123;\n    printf(&quot;I will summon the butler function.\\n&quot;);\n    butler();\n    printf(&quot;Yes. Bring me some tea and writeable DVDs. \\n&quot;);\n\n    return 0;\n&#125;\n\n// 开始定义函数\nvoid butler(void) &#123;\n    printf(&quot;You rang, sir?\\n&quot;);\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I will summon the butler function.\nYou rang, sir?\nYes. Bring me some tea and writeable DVDs. \n</code></pre>\n<h1 id=\"第3章-数据和C\"><a href=\"#第3章-数据和C\" class=\"headerlink\" title=\"第3章 数据和C\"></a>第3章 数据和C</h1><h2 id=\"platium-c\"><a href=\"#platium-c\" class=\"headerlink\" title=\"platium.c\"></a>platium.c</h2><p><code>scanf()</code> 函数引入，读取程序输入</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float weight;\n    float value;\n\n    printf(&quot;Are you worth your weight in platinum?\\n&quot;);\n    printf(&quot;Let&#39;s check it out.\\n&quot;);\n    printf(&quot;Please enter your weight in pounds: &quot;);\n\n    scanf(&quot;%f&quot;, &amp;weight);\n    value = 1700.0 * weight * 14.5833;\n    printf(&quot;Your weight in platinum is worth $%.2f.\\n&quot;, value);\n    printf(&quot;You are easily worth that! If platinum prices drop,\\n&quot;);\n    printf(&quot;eat more to maintain your value.\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"printl-c\"><a href=\"#printl-c\" class=\"headerlink\" title=\"printl.c\"></a>printl.c</h2><p>占位符不够会输出内存值</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int ten = 10;\n    int two = 2;\n\n    printf(&quot;Doing it right: &quot;);\n    printf(&quot;%d minus %d is %d\\n&quot;, ten, 2, ten - two);\n    printf(&quot;Doing it wrong: &quot;);\n    printf(&quot;%d minus %d is %d\\n&quot;, ten);  // 遗漏 2 个参数，输出内存值（随机）\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Doing it right: 10 minus 2 is 8\nDoing it wrong: 10 minus 0 is 52232400\n</code></pre>\n<h2 id=\"bases-c\"><a href=\"#bases-c\" class=\"headerlink\" title=\"bases.c\"></a>bases.c</h2><p>不同进制的显示</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int x = 100;\n\n    printf(&quot;dec = %d; octal = %o; hex = %x\\n&quot;, x, x, x);\n    printf(&quot;dec = %d; octal = %#o; hex = %#x\\n&quot;, x, x, x);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>dec = 100; octal = 144; hex = 64\ndec = 100; octal = 0144; hex = 0x64\n</code></pre>\n<h2 id=\"3-5-charcode-c\"><a href=\"#3-5-charcode-c\" class=\"headerlink\" title=\"3.5 charcode.c\"></a>3.5 charcode.c</h2><p>char 类型的打印</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    char ch;\n\n    printf(&quot;Please enter a character.\\n&quot;);\n    scanf(&quot;%c&quot;, &amp;ch);\n    // 占位符决定了变量的显示形式，而不是存储方式\n    printf(&quot;The code for %c is %d.\\n&quot;, ch, ch);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please enter a character.\na\nThe code for a is 97.\n</code></pre>\n<h2 id=\"3-8-typesize-c\"><a href=\"#3-8-typesize-c\" class=\"headerlink\" title=\"3.8 typesize.c\"></a>3.8 typesize.c</h2><p>sizeof() 函数可以打印类型大小</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;Type char has a size of %zd bytes.\\n&quot;, sizeof(char));\n    printf(&quot;Type short has a size of %zd bytes.\\n&quot;, sizeof(short));\n    printf(&quot;Type int has a size of %zd bytes.\\n&quot;, sizeof(int));\n    printf(&quot;Type long has a size of %zd bytes.\\n&quot;, sizeof(long));\n    printf(&quot;Type long long has a size of %zd bytes.\\n&quot;, sizeof(long long));\n    printf(&quot;Type _Bool long has a size of %zd bytes.\\n&quot;, sizeof(_Bool));\n    printf(&quot;Type float long has a size of %zd bytes.\\n&quot;, sizeof(float));\n    printf(&quot;Type double long has a size of %zd bytes.\\n&quot;, sizeof(double));\n    printf(&quot;Type long double long has a size of %zd bytes.\\n&quot;, sizeof(long double));\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Type char has a size of 1 bytes.\nType short has a size of 2 bytes.\nType int has a size of 4 bytes.\nType long has a size of 8 bytes.\nType long long has a size of 8 bytes.\nType _Bool long has a size of 1 bytes.\nType float long has a size of 4 bytes.\nType double long has a size of 8 bytes.\nType long double long has a size of 16 bytes.\n</code></pre>\n<h1 id=\"第4章-字符串和格式化输入-x2F-输出\"><a href=\"#第4章-字符串和格式化输入-x2F-输出\" class=\"headerlink\" title=\"第4章 字符串和格式化输入&#x2F;输出\"></a>第4章 字符串和格式化输入&#x2F;输出</h1><h2 id=\"4-1-talkback-c\"><a href=\"#4-1-talkback-c\" class=\"headerlink\" title=\"4.1 talkback.c\"></a>4.1 talkback.c</h2><p>字符串输入和输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;  // 提供 strlen() 函数原型\n#define DENSITY 62.4f  // 定义常量\n\nint main(void) &#123;\n    float weight, volume;\n    int size, letters;\n    char name[40];  // 定义数组\n\n    printf(&quot;Hi! What&#39;s your first name?\\n&quot;);\n    scanf(&quot;%s&quot;, name);\n    printf(&quot;%s, what&#39;s your weight in pounds?\\n&quot;, name);\n    scanf(&quot;%f&quot;, &amp;weight);\n    size = sizeof name;\n    letters = strlen(name);\n    volume = weight/DENSITY;\n    printf(&quot;Well, %s, your volume is %2.2f cubic feet.\\n&quot;,\n           name, volume);\n    printf(&quot;Also, your first name has %d letters, \\n&quot;, letters);\n    printf(&quot;and we have %d bytes to store it.\\n&quot;, size);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Hi! What&#39;s your first name?\nChristine\nChristine, what&#39;s your weight in pounds?\n154\nWell, Christine, your volume is 2.47 cubic feet.\nAlso, your first name has 9 letters, \nand we have 40 bytes to store it.\n</code></pre>\n<h2 id=\"4-3-praise2-c\"><a href=\"#4-3-praise2-c\" class=\"headerlink\" title=\"4.3 praise2.c\"></a>4.3 praise2.c</h2><p>验证字符串占用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;  // 提供 strlen() 函数原型\n#define PRAISE &quot;You are an extraordinary being.&quot;  // 自动计算大小\n\nint main(void) &#123;\n    char name[40];\n\n    printf(&quot;What&#39;s your name? &quot;);\n    scanf(&quot;%s&quot;, name);\n    printf(&quot;Hello, %s. %s\\n&quot;, name, PRAISE);\n    printf(&quot;Your name of %zd letters occupies %zd memory cells.\\n&quot;, \n           strlen(name), sizeof(name));\n    printf(&quot;The phrase of praise has %zd letters &quot;, strlen(PRAISE));\n    printf(&quot;and occupies %zd memory cells.\\n&quot;, sizeof(PRAISE));\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>What&#39;s your name? Serendipity Chance\nHello, Serendipity. You are an extraordinary being.\nYour name of 11 letters occupies 40 memory cells.\nThe phrase of praise has 31 letters and occupies 32 memory cells.\n</code></pre>\n<h2 id=\"4-7-width-c\"><a href=\"#4-7-width-c\" class=\"headerlink\" title=\"4.7 width.c\"></a>4.7 width.c</h2><p>输出修饰符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#define PAGES 959\n\nint main(void) &#123;\n    printf(&quot;*%d*\\n&quot;, PAGES);\n    printf(&quot;*%2d*\\n&quot;, PAGES);  // 不够会扩大\n    printf(&quot;*%10d*\\n&quot;, PAGES);  // 够会填充空格\n    printf(&quot;*%010d*\\n&quot;, PAGES);  // 0 填充\n    printf(&quot;*%-10d*\\n&quot;, PAGES);  // - 填充\n    printf(&quot;*%+10d*\\n&quot;, PAGES);  // 显示正负号\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>*959*\n*959*\n*       959*\n*0000000959*\n*959       *\n*      +959*\n</code></pre>\n<h2 id=\"4-8-floats-c\"><a href=\"#4-8-floats-c\" class=\"headerlink\" title=\"4.8 floats.c\"></a>4.8 floats.c</h2><p>输出修饰符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    const double RENT = 3852.99;\n\n    printf(&quot;*%f*\\n&quot;, RENT);  // 默认精度6\n    printf(&quot;*%e*\\n&quot;, RENT);  // 科学计数法，默认精度6\n    printf(&quot;*%4.2f*\\n&quot;, RENT);  // 自定精度\n    printf(&quot;*%3.1f*\\n&quot;, RENT);  // 自定精度，四舍五入\n    printf(&quot;*%g*\\n&quot;, RENT);  // 自动确定显示模式\n    printf(&quot;*%10.3f*\\n&quot;, RENT);  // 自定宽度\n    printf(&quot;*%10.3E*\\n&quot;, RENT);\n    printf(&quot;*%+4.2f*\\n&quot;, RENT);\n    printf(&quot;*%010.2f*\\n&quot;, RENT);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>*3852.990000*\n*3.852990e+03*\n*3852.99*\n*3853.0*\n*3852.99*\n*  3852.990*\n* 3.853E+03*\n*+3852.99*\n*0003852.99*\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第2章-C语言概述\"><a href=\"#第2章-C语言概述\" class=\"headerlink\" title=\"第2章 C语言概述\"></a>第2章 C语言概述</h1><h2 id=\"first-c\"><a href=\"#first-c\" class=\"headerlink\" title=\"first.c\"></a>first.c</h2><pre><code class=\"c\">// 示例程序\n#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;  // 定义变量\n    num = 1;  // 给变量赋值\n\n    printf(&quot;I am a simple &quot;);  // 调用函数，输出字符串\n    printf(&quot;computer.\\n&quot;);  // 输出占位符\n    printf(&quot;My favorite number is %d because it is first. \\n&quot;, num);  // 占位符输出 \n\n    return 0;  // 返回值\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I am a simple computer.\nMy favorite number is 1 because it is first. \n</code></pre>\n<h2 id=\"fathm-ft-c\"><a href=\"#fathm-ft-c\" class=\"headerlink\" title=\"fathm_ft.c\"></a>fathm_ft.c</h2><p>单位转换</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int feet, fathoms;\n    fathoms = 2;\n    feet = 6 * fathoms;\n\n    printf(&quot;There ara %d feet in %d fathoms!\\n&quot;, feet, fathoms);\n    printf(&quot;Yes, I said %d feet!\\n&quot;, 6 * fathoms);  // 待打印值可以是表达式\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>There ara 12 feet in 2 fathoms!\nYes, I said 12 feet!\n</code></pre>\n<h2 id=\"tow-func-c\"><a href=\"#tow-func-c\" class=\"headerlink\" title=\"tow_func.c\"></a>tow_func.c</h2><p>包含多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid butler(void); // 声明函数原型，告知编译器要使用该函数\n\nint main(void) &#123;\n    printf(&quot;I will summon the butler function.\\n&quot;);\n    butler();\n    printf(&quot;Yes. Bring me some tea and writeable DVDs. \\n&quot;);\n\n    return 0;\n&#125;\n\n// 开始定义函数\nvoid butler(void) &#123;\n    printf(&quot;You rang, sir?\\n&quot;);\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I will summon the butler function.\nYou rang, sir?\nYes. Bring me some tea and writeable DVDs. \n</code></pre>\n<h1 id=\"第3章-数据和C\"><a href=\"#第3章-数据和C\" class=\"headerlink\" title=\"第3章 数据和C\"></a>第3章 数据和C</h1><h2 id=\"platium-c\"><a href=\"#platium-c\" class=\"headerlink\" title=\"platium.c\"></a>platium.c</h2><p><code>scanf()</code> 函数引入，读取程序输入</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float weight;\n    float value;\n\n    printf(&quot;Are you worth your weight in platinum?\\n&quot;);\n    printf(&quot;Let&#39;s check it out.\\n&quot;);\n    printf(&quot;Please enter your weight in pounds: &quot;);\n\n    scanf(&quot;%f&quot;, &amp;weight);\n    value = 1700.0 * weight * 14.5833;\n    printf(&quot;Your weight in platinum is worth $%.2f.\\n&quot;, value);\n    printf(&quot;You are easily worth that! If platinum prices drop,\\n&quot;);\n    printf(&quot;eat more to maintain your value.\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"printl-c\"><a href=\"#printl-c\" class=\"headerlink\" title=\"printl.c\"></a>printl.c</h2><p>占位符不够会输出内存值</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int ten = 10;\n    int two = 2;\n\n    printf(&quot;Doing it right: &quot;);\n    printf(&quot;%d minus %d is %d\\n&quot;, ten, 2, ten - two);\n    printf(&quot;Doing it wrong: &quot;);\n    printf(&quot;%d minus %d is %d\\n&quot;, ten);  // 遗漏 2 个参数，输出内存值（随机）\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Doing it right: 10 minus 2 is 8\nDoing it wrong: 10 minus 0 is 52232400\n</code></pre>\n<h2 id=\"bases-c\"><a href=\"#bases-c\" class=\"headerlink\" title=\"bases.c\"></a>bases.c</h2><p>不同进制的显示</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int x = 100;\n\n    printf(&quot;dec = %d; octal = %o; hex = %x\\n&quot;, x, x, x);\n    printf(&quot;dec = %d; octal = %#o; hex = %#x\\n&quot;, x, x, x);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>dec = 100; octal = 144; hex = 64\ndec = 100; octal = 0144; hex = 0x64\n</code></pre>\n<h2 id=\"3-5-charcode-c\"><a href=\"#3-5-charcode-c\" class=\"headerlink\" title=\"3.5 charcode.c\"></a>3.5 charcode.c</h2><p>char 类型的打印</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    char ch;\n\n    printf(&quot;Please enter a character.\\n&quot;);\n    scanf(&quot;%c&quot;, &amp;ch);\n    // 占位符决定了变量的显示形式，而不是存储方式\n    printf(&quot;The code for %c is %d.\\n&quot;, ch, ch);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please enter a character.\na\nThe code for a is 97.\n</code></pre>\n<h2 id=\"3-8-typesize-c\"><a href=\"#3-8-typesize-c\" class=\"headerlink\" title=\"3.8 typesize.c\"></a>3.8 typesize.c</h2><p>sizeof() 函数可以打印类型大小</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;Type char has a size of %zd bytes.\\n&quot;, sizeof(char));\n    printf(&quot;Type short has a size of %zd bytes.\\n&quot;, sizeof(short));\n    printf(&quot;Type int has a size of %zd bytes.\\n&quot;, sizeof(int));\n    printf(&quot;Type long has a size of %zd bytes.\\n&quot;, sizeof(long));\n    printf(&quot;Type long long has a size of %zd bytes.\\n&quot;, sizeof(long long));\n    printf(&quot;Type _Bool long has a size of %zd bytes.\\n&quot;, sizeof(_Bool));\n    printf(&quot;Type float long has a size of %zd bytes.\\n&quot;, sizeof(float));\n    printf(&quot;Type double long has a size of %zd bytes.\\n&quot;, sizeof(double));\n    printf(&quot;Type long double long has a size of %zd bytes.\\n&quot;, sizeof(long double));\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Type char has a size of 1 bytes.\nType short has a size of 2 bytes.\nType int has a size of 4 bytes.\nType long has a size of 8 bytes.\nType long long has a size of 8 bytes.\nType _Bool long has a size of 1 bytes.\nType float long has a size of 4 bytes.\nType double long has a size of 8 bytes.\nType long double long has a size of 16 bytes.\n</code></pre>\n<h1 id=\"第4章-字符串和格式化输入-x2F-输出\"><a href=\"#第4章-字符串和格式化输入-x2F-输出\" class=\"headerlink\" title=\"第4章 字符串和格式化输入&#x2F;输出\"></a>第4章 字符串和格式化输入&#x2F;输出</h1><h2 id=\"4-1-talkback-c\"><a href=\"#4-1-talkback-c\" class=\"headerlink\" title=\"4.1 talkback.c\"></a>4.1 talkback.c</h2><p>字符串输入和输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;  // 提供 strlen() 函数原型\n#define DENSITY 62.4f  // 定义常量\n\nint main(void) &#123;\n    float weight, volume;\n    int size, letters;\n    char name[40];  // 定义数组\n\n    printf(&quot;Hi! What&#39;s your first name?\\n&quot;);\n    scanf(&quot;%s&quot;, name);\n    printf(&quot;%s, what&#39;s your weight in pounds?\\n&quot;, name);\n    scanf(&quot;%f&quot;, &amp;weight);\n    size = sizeof name;\n    letters = strlen(name);\n    volume = weight/DENSITY;\n    printf(&quot;Well, %s, your volume is %2.2f cubic feet.\\n&quot;,\n           name, volume);\n    printf(&quot;Also, your first name has %d letters, \\n&quot;, letters);\n    printf(&quot;and we have %d bytes to store it.\\n&quot;, size);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Hi! What&#39;s your first name?\nChristine\nChristine, what&#39;s your weight in pounds?\n154\nWell, Christine, your volume is 2.47 cubic feet.\nAlso, your first name has 9 letters, \nand we have 40 bytes to store it.\n</code></pre>\n<h2 id=\"4-3-praise2-c\"><a href=\"#4-3-praise2-c\" class=\"headerlink\" title=\"4.3 praise2.c\"></a>4.3 praise2.c</h2><p>验证字符串占用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;  // 提供 strlen() 函数原型\n#define PRAISE &quot;You are an extraordinary being.&quot;  // 自动计算大小\n\nint main(void) &#123;\n    char name[40];\n\n    printf(&quot;What&#39;s your name? &quot;);\n    scanf(&quot;%s&quot;, name);\n    printf(&quot;Hello, %s. %s\\n&quot;, name, PRAISE);\n    printf(&quot;Your name of %zd letters occupies %zd memory cells.\\n&quot;, \n           strlen(name), sizeof(name));\n    printf(&quot;The phrase of praise has %zd letters &quot;, strlen(PRAISE));\n    printf(&quot;and occupies %zd memory cells.\\n&quot;, sizeof(PRAISE));\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>What&#39;s your name? Serendipity Chance\nHello, Serendipity. You are an extraordinary being.\nYour name of 11 letters occupies 40 memory cells.\nThe phrase of praise has 31 letters and occupies 32 memory cells.\n</code></pre>\n<h2 id=\"4-7-width-c\"><a href=\"#4-7-width-c\" class=\"headerlink\" title=\"4.7 width.c\"></a>4.7 width.c</h2><p>输出修饰符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#define PAGES 959\n\nint main(void) &#123;\n    printf(&quot;*%d*\\n&quot;, PAGES);\n    printf(&quot;*%2d*\\n&quot;, PAGES);  // 不够会扩大\n    printf(&quot;*%10d*\\n&quot;, PAGES);  // 够会填充空格\n    printf(&quot;*%010d*\\n&quot;, PAGES);  // 0 填充\n    printf(&quot;*%-10d*\\n&quot;, PAGES);  // - 填充\n    printf(&quot;*%+10d*\\n&quot;, PAGES);  // 显示正负号\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>*959*\n*959*\n*       959*\n*0000000959*\n*959       *\n*      +959*\n</code></pre>\n<h2 id=\"4-8-floats-c\"><a href=\"#4-8-floats-c\" class=\"headerlink\" title=\"4.8 floats.c\"></a>4.8 floats.c</h2><p>输出修饰符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    const double RENT = 3852.99;\n\n    printf(&quot;*%f*\\n&quot;, RENT);  // 默认精度6\n    printf(&quot;*%e*\\n&quot;, RENT);  // 科学计数法，默认精度6\n    printf(&quot;*%4.2f*\\n&quot;, RENT);  // 自定精度\n    printf(&quot;*%3.1f*\\n&quot;, RENT);  // 自定精度，四舍五入\n    printf(&quot;*%g*\\n&quot;, RENT);  // 自动确定显示模式\n    printf(&quot;*%10.3f*\\n&quot;, RENT);  // 自定宽度\n    printf(&quot;*%10.3E*\\n&quot;, RENT);\n    printf(&quot;*%+4.2f*\\n&quot;, RENT);\n    printf(&quot;*%010.2f*\\n&quot;, RENT);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>*3852.990000*\n*3.852990e+03*\n*3852.99*\n*3853.0*\n*3852.99*\n*  3852.990*\n* 3.853E+03*\n*+3852.99*\n*0003852.99*\n</code></pre>\n"},{"title":"Git-一份代码同时提交两个仓库","date":"2023-05-24T17:42:19.000Z","_content":"\n# 绑定多个远端仓库\n\n绑定第一个仓库，能够正常推送拉取\n\n```bash\n$ git remote add orgin https://gitee.com/enilu/material-admin.git\n```\n\n绑定第二个仓库，只做推送\n\n```bash\n$ git remote set-url --add origin https://github.com/enilu/material-admin.git\n```\n\n这个时候查看远端仓库信息会有两个 Push 的远程仓库\n\n```bash\n$ git remote -v\norgin   https://github.com/MeterosBehind/MyJava.git (fetch)\norgin   https://github.com/MeterosBehind/MyJava.git (push)\norgin   https://gitee.com/youngforever1728/my-java.git (push)\n```\n\n之后再进行 add commit push 即可，会将代码同时 Push 到两个远程仓库中\n\n","source":"_posts/Git/Git-一份代码同时提交两个仓库.md","raw":"---\ntitle: Git-一份代码同时提交两个仓库\ncategories:\n  - 工具\n  - Git\ntags:\n  - Git\ndate: 2023-05-25 01:42:19\n---\n\n# 绑定多个远端仓库\n\n绑定第一个仓库，能够正常推送拉取\n\n```bash\n$ git remote add orgin https://gitee.com/enilu/material-admin.git\n```\n\n绑定第二个仓库，只做推送\n\n```bash\n$ git remote set-url --add origin https://github.com/enilu/material-admin.git\n```\n\n这个时候查看远端仓库信息会有两个 Push 的远程仓库\n\n```bash\n$ git remote -v\norgin   https://github.com/MeterosBehind/MyJava.git (fetch)\norgin   https://github.com/MeterosBehind/MyJava.git (push)\norgin   https://gitee.com/youngforever1728/my-java.git (push)\n```\n\n之后再进行 add commit push 即可，会将代码同时 Push 到两个远程仓库中\n\n","slug":"Git-Git-一份代码同时提交两个仓库","published":1,"updated":"2023-06-14T03:07:51.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siar0002m0t5bn4d93je","content":"<h1 id=\"绑定多个远端仓库\"><a href=\"#绑定多个远端仓库\" class=\"headerlink\" title=\"绑定多个远端仓库\"></a>绑定多个远端仓库</h1><p>绑定第一个仓库，能够正常推送拉取</p>\n<pre><code class=\"bash\">$ git remote add orgin https://gitee.com/enilu/material-admin.git\n</code></pre>\n<p>绑定第二个仓库，只做推送</p>\n<pre><code class=\"bash\">$ git remote set-url --add origin https://github.com/enilu/material-admin.git\n</code></pre>\n<p>这个时候查看远端仓库信息会有两个 Push 的远程仓库</p>\n<pre><code class=\"bash\">$ git remote -v\norgin   https://github.com/MeterosBehind/MyJava.git (fetch)\norgin   https://github.com/MeterosBehind/MyJava.git (push)\norgin   https://gitee.com/youngforever1728/my-java.git (push)\n</code></pre>\n<p>之后再进行 add commit push 即可，会将代码同时 Push 到两个远程仓库中</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"绑定多个远端仓库\"><a href=\"#绑定多个远端仓库\" class=\"headerlink\" title=\"绑定多个远端仓库\"></a>绑定多个远端仓库</h1><p>绑定第一个仓库，能够正常推送拉取</p>\n<pre><code class=\"bash\">$ git remote add orgin https://gitee.com/enilu/material-admin.git\n</code></pre>\n<p>绑定第二个仓库，只做推送</p>\n<pre><code class=\"bash\">$ git remote set-url --add origin https://github.com/enilu/material-admin.git\n</code></pre>\n<p>这个时候查看远端仓库信息会有两个 Push 的远程仓库</p>\n<pre><code class=\"bash\">$ git remote -v\norgin   https://github.com/MeterosBehind/MyJava.git (fetch)\norgin   https://github.com/MeterosBehind/MyJava.git (push)\norgin   https://gitee.com/youngforever1728/my-java.git (push)\n</code></pre>\n<p>之后再进行 add commit push 即可，会将代码同时 Push 到两个远程仓库中</p>\n"},{"title":"Hexo-分类管理md文件","date":"2023-05-25T03:44:25.000Z","_content":"\n# 需求\n\n通过 `hexo new` 创建的文章默认统一在 `source/_posts` 文件夹下，文章多了之后容易找不到和冲突\n\n需要更改配置，分类管理文章\n\n# 步骤\n\n## 1. 年月分类\n\n在`_config.yml`文件中修改下面的命令，使默认创建的文章按照年月分类\n`new_post_name: :year/:month/:title.md`\n\n```bash\n$ hexo new post test1\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/2023/05/test1.md\n```\n\n\n\n## 2. 自定义分类\n\n```bash\n$ hexo new post -p 后端/test2\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/后端/test2.md\n```\n\n# 配置\n\n## 旧文章处理\n\n在 `source/_posts` 文件夹手动分类，重新生成部署即可\n\n# 参考\n\n* [hexo博客文章多了怎么管理](https://blog.csdn.net/weixin_40251892/article/details/107590794)\n\n","source":"_posts/Hexo/Hexo-分类管理md文件.md","raw":"---\ntitle: Hexo-分类管理md文件\ncategories:\n  - 工具\n  - Hexo\ntags:\n  - hexo\ndate: 2023-05-25 11:44:25\n---\n\n# 需求\n\n通过 `hexo new` 创建的文章默认统一在 `source/_posts` 文件夹下，文章多了之后容易找不到和冲突\n\n需要更改配置，分类管理文章\n\n# 步骤\n\n## 1. 年月分类\n\n在`_config.yml`文件中修改下面的命令，使默认创建的文章按照年月分类\n`new_post_name: :year/:month/:title.md`\n\n```bash\n$ hexo new post test1\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/2023/05/test1.md\n```\n\n\n\n## 2. 自定义分类\n\n```bash\n$ hexo new post -p 后端/test2\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/后端/test2.md\n```\n\n# 配置\n\n## 旧文章处理\n\n在 `source/_posts` 文件夹手动分类，重新生成部署即可\n\n# 参考\n\n* [hexo博客文章多了怎么管理](https://blog.csdn.net/weixin_40251892/article/details/107590794)\n\n","slug":"Hexo-Hexo-分类管理md文件","published":1,"updated":"2023-06-14T03:07:51.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siat0005m0t5d9oi9qjp","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过 <code>hexo new</code> 创建的文章默认统一在 <code>source/_posts</code> 文件夹下，文章多了之后容易找不到和冲突</p>\n<p>需要更改配置，分类管理文章</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-年月分类\"><a href=\"#1-年月分类\" class=\"headerlink\" title=\"1. 年月分类\"></a>1. 年月分类</h2><p>在<code>_config.yml</code>文件中修改下面的命令，使默认创建的文章按照年月分类<br><code>new_post_name: :year/:month/:title.md</code></p>\n<pre><code class=\"bash\">$ hexo new post test1\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/2023/05/test1.md\n</code></pre>\n<h2 id=\"2-自定义分类\"><a href=\"#2-自定义分类\" class=\"headerlink\" title=\"2. 自定义分类\"></a>2. 自定义分类</h2><pre><code class=\"bash\">$ hexo new post -p 后端/test2\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/后端/test2.md\n</code></pre>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"旧文章处理\"><a href=\"#旧文章处理\" class=\"headerlink\" title=\"旧文章处理\"></a>旧文章处理</h2><p>在 <code>source/_posts</code> 文件夹手动分类，重新生成部署即可</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/weixin_40251892/article/details/107590794\">hexo博客文章多了怎么管理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过 <code>hexo new</code> 创建的文章默认统一在 <code>source/_posts</code> 文件夹下，文章多了之后容易找不到和冲突</p>\n<p>需要更改配置，分类管理文章</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-年月分类\"><a href=\"#1-年月分类\" class=\"headerlink\" title=\"1. 年月分类\"></a>1. 年月分类</h2><p>在<code>_config.yml</code>文件中修改下面的命令，使默认创建的文章按照年月分类<br><code>new_post_name: :year/:month/:title.md</code></p>\n<pre><code class=\"bash\">$ hexo new post test1\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/2023/05/test1.md\n</code></pre>\n<h2 id=\"2-自定义分类\"><a href=\"#2-自定义分类\" class=\"headerlink\" title=\"2. 自定义分类\"></a>2. 自定义分类</h2><pre><code class=\"bash\">$ hexo new post -p 后端/test2\nINFO  Validating config\nINFO  Created: ~/Documents/Hexo/source/_posts/后端/test2.md\n</code></pre>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"旧文章处理\"><a href=\"#旧文章处理\" class=\"headerlink\" title=\"旧文章处理\"></a>旧文章处理</h2><p>在 <code>source/_posts</code> 文件夹手动分类，重新生成部署即可</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/weixin_40251892/article/details/107590794\">hexo博客文章多了怎么管理</a></li>\n</ul>\n"},{"title":"C-C Primer Plus 练习程序","date":"2023-05-30T14:45:25.000Z","_content":"\n# 第2章 C语言概述\n\n## 第 1 题\n\n练习 printf() 函数和转义字符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Gustav Mahler\\n\");\n    printf(\"Gustav\\nMahler\\n\");\n    printf(\"Gustav \");\n    printf(\"Mahler\\n\");\n\n    return 0;\n}\n```\n\n输出\n\n```\nGustav Mahler\nGustav\nMahler\nGustav Mahler\n```\n\n## 第 2 题\n\n练习 printf() 函数\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"My name is Gustav Mahler\\n\");\n    printf(\"My address is stress no.1\\n\");\n\n    return 0;\n}\n```\n\n输出\n\n```\nMy name is Gustav Mahler\nMy address is stress no.1\n```\n\n## 第 3 题\n\n练习变量、printf() 函数、占位输出符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int age;  // 定义变量\n    age = 18;  // 给变量赋值\n\n    printf(\"My age is %d, and I have lived %d days.\\n\", age, age * 365);\n\n    return 0;\n}\n```\n\n输出\n\n```\nMy age is 18, and I have lived 6570 days.\n```\n\n## 第 4 题\n\n练习多个函数\n\n```c\n#include <stdio.h>\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid jolly(void);\nvoid deny(void);\n\n// main 函数写在开头，符合习惯\nint main(void) {\n    jolly();  // 调用函数\n    deny();\n\n    return 0;\n}\n\n// 定义函数\nvoid jolly(void) {\n    printf(\"For he's a jolly good fellow!\\n\");\n    printf(\"For he's a jolly good fellow!\\n\");\n    printf(\"For he's a jolly good fellow!\\n\");\n}\n// 定义函数\nvoid deny(void) {\n    printf(\"Which nobody can deny!\\n\");\n}\n```\n\n输出\n\n```\nFor he's a jolly good fellow!\nFor he's a jolly good fellow!\nFor he's a jolly good fellow!\nWhich nobody can deny!\n```\n\n## 第 5 题\n\n练习多个函数\n\n```c\n#include <stdio.h>\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid br(void);\nvoid ic(void);\n\n// main 函数写在开头，符合习惯\nint main(void) {\n    br();  // 调用函数\n    printf(\", \");\n    ic();\n    printf(\"\\n\");\n    ic();\n    printf(\",\\n\");\n    br();\n\n    return 0;\n}\n\n// 定义函数\nvoid br(void) {\n    printf(\"Brazil, Russia\");\n}\n// 定义函数\nvoid ic(void) {\n    printf(\"India, China\");\n}\n```\n\n输出\n\n```\nBrazil, Russia, India, China\nIndia, China,\nBrazil, Russia\n```\n\n## 第 6 题\n\n练习变量和计算，占位符输出\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int toes;\n    toes = 10;\n\n    printf(\"toes * 2 = %d\\n\", toes * 2);\n    printf(\"toes ^ 2 = %d\\n\", toes * toes);\n\n    return 0;\n}\n```\n\n输出\n\n```\ntoes * 2 = 20\ntoes ^ 2 = 100\n```\n\n## 第 7 题\n\n练习函数定义和调用\n\n```c\n#include <stdio.h>\n\nvoid smile(void);\n\nint main(void) {\n    smile();\n    smile();\n    smile();\n    printf(\"\\n\");\n    smile();\n    smile();\n    printf(\"\\n\");\n    smile();\n\n    return 0;\n}\n\nvoid smile(void) {\n    printf(\"Smile!\");\n}\n```\n\n输出\n\n```\nSmile!Smile!Smile!\nSmile!Smile!\nSmile!\n```\n\n## 第 8 题\n\n练习函数嵌套调用\n\n```c\n#include <stdio.h>\n\nvoid one_three(void);\nvoid two(void);\n\nint main(void) {\n    printf(\"starting now:\\n\");\n    one_three();\n    printf(\"done!\");\n\n    return 0;\n}\n\n// 函数定义位置并不影响调用\nvoid one_three(void) {\n    printf(\"one\\n\");\n    two();\n    printf(\"three\\n\");\n}\nvoid two(void) {\n    printf(\"two\\n\");\n}\n```\n\n输出\n\n```\nstarting now:\none\ntwo\nthree\ndone!\n```\n\n# 第3章 数据和C\n\n## 第 2 题\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    char ch;\n\n    printf(\"Please type a ascii code: \");\n    scanf(\"%c\", &ch);\n    printf(\"char of code is %d\", ch);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a ascii code: A\nchar of code is 65\n```\n\n## 第 4 题\n\n浮点数的输入和输出\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float f;\n\n    printf(\"Please type a num of float: \");\n    scanf(\"%f\", &f);\n    printf(\"float is %f\\n\", f);\n    printf(\"float e is %e\\n\", f);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n```\n\n## 第 5 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float f;\n\n    printf(\"Please type a num of float: \");\n    scanf(\"%f\", &f);\n    printf(\"float is %f\\n\", f);\n    printf(\"float e is %e\\n\", f);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n```\n\n## 第 6 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int num;\n\n    printf(\"请输入水的夸脱数：\");\n    scanf(\"%d\", &num);\n    printf(\"水分子数量为：%e\\n\", num * 950 / 3e-23);\n\n    return 0;\n}\n```\n\n输出\n\n```\n请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n```\n\n## 第 7 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int num;\n\n    printf(\"请输入水的夸脱数：\");\n    scanf(\"%d\", &num);\n    printf(\"水分子数量为：%e\\n\", num * 950 / 3e-23);\n\n    return 0;\n}\n```\n\n输出\n\n```\n请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n```\n\n","source":"_posts/C语言/C-C Primer Plus 练习程序.md","raw":"---\ntitle: C-C Primer Plus 练习程序\ncategories:\n  - 编程语言\n  - C\ntags:\n  - C\ndate: 2023-05-30 22:45:25\n---\n\n# 第2章 C语言概述\n\n## 第 1 题\n\n练习 printf() 函数和转义字符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Gustav Mahler\\n\");\n    printf(\"Gustav\\nMahler\\n\");\n    printf(\"Gustav \");\n    printf(\"Mahler\\n\");\n\n    return 0;\n}\n```\n\n输出\n\n```\nGustav Mahler\nGustav\nMahler\nGustav Mahler\n```\n\n## 第 2 题\n\n练习 printf() 函数\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"My name is Gustav Mahler\\n\");\n    printf(\"My address is stress no.1\\n\");\n\n    return 0;\n}\n```\n\n输出\n\n```\nMy name is Gustav Mahler\nMy address is stress no.1\n```\n\n## 第 3 题\n\n练习变量、printf() 函数、占位输出符\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int age;  // 定义变量\n    age = 18;  // 给变量赋值\n\n    printf(\"My age is %d, and I have lived %d days.\\n\", age, age * 365);\n\n    return 0;\n}\n```\n\n输出\n\n```\nMy age is 18, and I have lived 6570 days.\n```\n\n## 第 4 题\n\n练习多个函数\n\n```c\n#include <stdio.h>\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid jolly(void);\nvoid deny(void);\n\n// main 函数写在开头，符合习惯\nint main(void) {\n    jolly();  // 调用函数\n    deny();\n\n    return 0;\n}\n\n// 定义函数\nvoid jolly(void) {\n    printf(\"For he's a jolly good fellow!\\n\");\n    printf(\"For he's a jolly good fellow!\\n\");\n    printf(\"For he's a jolly good fellow!\\n\");\n}\n// 定义函数\nvoid deny(void) {\n    printf(\"Which nobody can deny!\\n\");\n}\n```\n\n输出\n\n```\nFor he's a jolly good fellow!\nFor he's a jolly good fellow!\nFor he's a jolly good fellow!\nWhich nobody can deny!\n```\n\n## 第 5 题\n\n练习多个函数\n\n```c\n#include <stdio.h>\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid br(void);\nvoid ic(void);\n\n// main 函数写在开头，符合习惯\nint main(void) {\n    br();  // 调用函数\n    printf(\", \");\n    ic();\n    printf(\"\\n\");\n    ic();\n    printf(\",\\n\");\n    br();\n\n    return 0;\n}\n\n// 定义函数\nvoid br(void) {\n    printf(\"Brazil, Russia\");\n}\n// 定义函数\nvoid ic(void) {\n    printf(\"India, China\");\n}\n```\n\n输出\n\n```\nBrazil, Russia, India, China\nIndia, China,\nBrazil, Russia\n```\n\n## 第 6 题\n\n练习变量和计算，占位符输出\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int toes;\n    toes = 10;\n\n    printf(\"toes * 2 = %d\\n\", toes * 2);\n    printf(\"toes ^ 2 = %d\\n\", toes * toes);\n\n    return 0;\n}\n```\n\n输出\n\n```\ntoes * 2 = 20\ntoes ^ 2 = 100\n```\n\n## 第 7 题\n\n练习函数定义和调用\n\n```c\n#include <stdio.h>\n\nvoid smile(void);\n\nint main(void) {\n    smile();\n    smile();\n    smile();\n    printf(\"\\n\");\n    smile();\n    smile();\n    printf(\"\\n\");\n    smile();\n\n    return 0;\n}\n\nvoid smile(void) {\n    printf(\"Smile!\");\n}\n```\n\n输出\n\n```\nSmile!Smile!Smile!\nSmile!Smile!\nSmile!\n```\n\n## 第 8 题\n\n练习函数嵌套调用\n\n```c\n#include <stdio.h>\n\nvoid one_three(void);\nvoid two(void);\n\nint main(void) {\n    printf(\"starting now:\\n\");\n    one_three();\n    printf(\"done!\");\n\n    return 0;\n}\n\n// 函数定义位置并不影响调用\nvoid one_three(void) {\n    printf(\"one\\n\");\n    two();\n    printf(\"three\\n\");\n}\nvoid two(void) {\n    printf(\"two\\n\");\n}\n```\n\n输出\n\n```\nstarting now:\none\ntwo\nthree\ndone!\n```\n\n# 第3章 数据和C\n\n## 第 2 题\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    char ch;\n\n    printf(\"Please type a ascii code: \");\n    scanf(\"%c\", &ch);\n    printf(\"char of code is %d\", ch);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a ascii code: A\nchar of code is 65\n```\n\n## 第 4 题\n\n浮点数的输入和输出\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float f;\n\n    printf(\"Please type a num of float: \");\n    scanf(\"%f\", &f);\n    printf(\"float is %f\\n\", f);\n    printf(\"float e is %e\\n\", f);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n```\n\n## 第 5 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    float f;\n\n    printf(\"Please type a num of float: \");\n    scanf(\"%f\", &f);\n    printf(\"float is %f\\n\", f);\n    printf(\"float e is %e\\n\", f);\n\n    return 0;\n}\n```\n\n输出\n\n```\nPlease type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n```\n\n## 第 6 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int num;\n\n    printf(\"请输入水的夸脱数：\");\n    scanf(\"%d\", &num);\n    printf(\"水分子数量为：%e\\n\", num * 950 / 3e-23);\n\n    return 0;\n}\n```\n\n输出\n\n```\n请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n```\n\n## 第 7 题\n\n浮点数运算\n\n```c\n#include <stdio.h>\n\nint main(void) {\n    int num;\n\n    printf(\"请输入水的夸脱数：\");\n    scanf(\"%d\", &num);\n    printf(\"水分子数量为：%e\\n\", num * 950 / 3e-23);\n\n    return 0;\n}\n```\n\n输出\n\n```\n请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n```\n\n","slug":"C语言-C-C-Primer-Plus-练习程序","published":1,"updated":"2023-06-14T03:07:51.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siau0006m0t51jzhf4g3","content":"<h1 id=\"第2章-C语言概述\"><a href=\"#第2章-C语言概述\" class=\"headerlink\" title=\"第2章 C语言概述\"></a>第2章 C语言概述</h1><h2 id=\"第-1-题\"><a href=\"#第-1-题\" class=\"headerlink\" title=\"第 1 题\"></a>第 1 题</h2><p>练习 printf() 函数和转义字符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;Gustav Mahler\\n&quot;);\n    printf(&quot;Gustav\\nMahler\\n&quot;);\n    printf(&quot;Gustav &quot;);\n    printf(&quot;Mahler\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Gustav Mahler\nGustav\nMahler\nGustav Mahler\n</code></pre>\n<h2 id=\"第-2-题\"><a href=\"#第-2-题\" class=\"headerlink\" title=\"第 2 题\"></a>第 2 题</h2><p>练习 printf() 函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;My name is Gustav Mahler\\n&quot;);\n    printf(&quot;My address is stress no.1\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>My name is Gustav Mahler\nMy address is stress no.1\n</code></pre>\n<h2 id=\"第-3-题\"><a href=\"#第-3-题\" class=\"headerlink\" title=\"第 3 题\"></a>第 3 题</h2><p>练习变量、printf() 函数、占位输出符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int age;  // 定义变量\n    age = 18;  // 给变量赋值\n\n    printf(&quot;My age is %d, and I have lived %d days.\\n&quot;, age, age * 365);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>My age is 18, and I have lived 6570 days.\n</code></pre>\n<h2 id=\"第-4-题\"><a href=\"#第-4-题\" class=\"headerlink\" title=\"第 4 题\"></a>第 4 题</h2><p>练习多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid jolly(void);\nvoid deny(void);\n\n// main 函数写在开头，符合习惯\nint main(void) &#123;\n    jolly();  // 调用函数\n    deny();\n\n    return 0;\n&#125;\n\n// 定义函数\nvoid jolly(void) &#123;\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n&#125;\n// 定义函数\nvoid deny(void) &#123;\n    printf(&quot;Which nobody can deny!\\n&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>For he&#39;s a jolly good fellow!\nFor he&#39;s a jolly good fellow!\nFor he&#39;s a jolly good fellow!\nWhich nobody can deny!\n</code></pre>\n<h2 id=\"第-5-题\"><a href=\"#第-5-题\" class=\"headerlink\" title=\"第 5 题\"></a>第 5 题</h2><p>练习多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid br(void);\nvoid ic(void);\n\n// main 函数写在开头，符合习惯\nint main(void) &#123;\n    br();  // 调用函数\n    printf(&quot;, &quot;);\n    ic();\n    printf(&quot;\\n&quot;);\n    ic();\n    printf(&quot;,\\n&quot;);\n    br();\n\n    return 0;\n&#125;\n\n// 定义函数\nvoid br(void) &#123;\n    printf(&quot;Brazil, Russia&quot;);\n&#125;\n// 定义函数\nvoid ic(void) &#123;\n    printf(&quot;India, China&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Brazil, Russia, India, China\nIndia, China,\nBrazil, Russia\n</code></pre>\n<h2 id=\"第-6-题\"><a href=\"#第-6-题\" class=\"headerlink\" title=\"第 6 题\"></a>第 6 题</h2><p>练习变量和计算，占位符输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int toes;\n    toes = 10;\n\n    printf(&quot;toes * 2 = %d\\n&quot;, toes * 2);\n    printf(&quot;toes ^ 2 = %d\\n&quot;, toes * toes);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>toes * 2 = 20\ntoes ^ 2 = 100\n</code></pre>\n<h2 id=\"第-7-题\"><a href=\"#第-7-题\" class=\"headerlink\" title=\"第 7 题\"></a>第 7 题</h2><p>练习函数定义和调用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid smile(void);\n\nint main(void) &#123;\n    smile();\n    smile();\n    smile();\n    printf(&quot;\\n&quot;);\n    smile();\n    smile();\n    printf(&quot;\\n&quot;);\n    smile();\n\n    return 0;\n&#125;\n\nvoid smile(void) &#123;\n    printf(&quot;Smile!&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Smile!Smile!Smile!\nSmile!Smile!\nSmile!\n</code></pre>\n<h2 id=\"第-8-题\"><a href=\"#第-8-题\" class=\"headerlink\" title=\"第 8 题\"></a>第 8 题</h2><p>练习函数嵌套调用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid one_three(void);\nvoid two(void);\n\nint main(void) &#123;\n    printf(&quot;starting now:\\n&quot;);\n    one_three();\n    printf(&quot;done!&quot;);\n\n    return 0;\n&#125;\n\n// 函数定义位置并不影响调用\nvoid one_three(void) &#123;\n    printf(&quot;one\\n&quot;);\n    two();\n    printf(&quot;three\\n&quot;);\n&#125;\nvoid two(void) &#123;\n    printf(&quot;two\\n&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>starting now:\none\ntwo\nthree\ndone!\n</code></pre>\n<h1 id=\"第3章-数据和C\"><a href=\"#第3章-数据和C\" class=\"headerlink\" title=\"第3章 数据和C\"></a>第3章 数据和C</h1><h2 id=\"第-2-题-1\"><a href=\"#第-2-题-1\" class=\"headerlink\" title=\"第 2 题\"></a>第 2 题</h2><pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    char ch;\n\n    printf(&quot;Please type a ascii code: &quot;);\n    scanf(&quot;%c&quot;, &amp;ch);\n    printf(&quot;char of code is %d&quot;, ch);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a ascii code: A\nchar of code is 65\n</code></pre>\n<h2 id=\"第-4-题-1\"><a href=\"#第-4-题-1\" class=\"headerlink\" title=\"第 4 题\"></a>第 4 题</h2><p>浮点数的输入和输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float f;\n\n    printf(&quot;Please type a num of float: &quot;);\n    scanf(&quot;%f&quot;, &amp;f);\n    printf(&quot;float is %f\\n&quot;, f);\n    printf(&quot;float e is %e\\n&quot;, f);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n</code></pre>\n<h2 id=\"第-5-题-1\"><a href=\"#第-5-题-1\" class=\"headerlink\" title=\"第 5 题\"></a>第 5 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float f;\n\n    printf(&quot;Please type a num of float: &quot;);\n    scanf(&quot;%f&quot;, &amp;f);\n    printf(&quot;float is %f\\n&quot;, f);\n    printf(&quot;float e is %e\\n&quot;, f);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n</code></pre>\n<h2 id=\"第-6-题-1\"><a href=\"#第-6-题-1\" class=\"headerlink\" title=\"第 6 题\"></a>第 6 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;\n\n    printf(&quot;请输入水的夸脱数：&quot;);\n    scanf(&quot;%d&quot;, &amp;num);\n    printf(&quot;水分子数量为：%e\\n&quot;, num * 950 / 3e-23);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n</code></pre>\n<h2 id=\"第-7-题-1\"><a href=\"#第-7-题-1\" class=\"headerlink\" title=\"第 7 题\"></a>第 7 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;\n\n    printf(&quot;请输入水的夸脱数：&quot;);\n    scanf(&quot;%d&quot;, &amp;num);\n    printf(&quot;水分子数量为：%e\\n&quot;, num * 950 / 3e-23);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第2章-C语言概述\"><a href=\"#第2章-C语言概述\" class=\"headerlink\" title=\"第2章 C语言概述\"></a>第2章 C语言概述</h1><h2 id=\"第-1-题\"><a href=\"#第-1-题\" class=\"headerlink\" title=\"第 1 题\"></a>第 1 题</h2><p>练习 printf() 函数和转义字符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;Gustav Mahler\\n&quot;);\n    printf(&quot;Gustav\\nMahler\\n&quot;);\n    printf(&quot;Gustav &quot;);\n    printf(&quot;Mahler\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Gustav Mahler\nGustav\nMahler\nGustav Mahler\n</code></pre>\n<h2 id=\"第-2-题\"><a href=\"#第-2-题\" class=\"headerlink\" title=\"第 2 题\"></a>第 2 题</h2><p>练习 printf() 函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    printf(&quot;My name is Gustav Mahler\\n&quot;);\n    printf(&quot;My address is stress no.1\\n&quot;);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>My name is Gustav Mahler\nMy address is stress no.1\n</code></pre>\n<h2 id=\"第-3-题\"><a href=\"#第-3-题\" class=\"headerlink\" title=\"第 3 题\"></a>第 3 题</h2><p>练习变量、printf() 函数、占位输出符</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int age;  // 定义变量\n    age = 18;  // 给变量赋值\n\n    printf(&quot;My age is %d, and I have lived %d days.\\n&quot;, age, age * 365);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>My age is 18, and I have lived 6570 days.\n</code></pre>\n<h2 id=\"第-4-题\"><a href=\"#第-4-题\" class=\"headerlink\" title=\"第 4 题\"></a>第 4 题</h2><p>练习多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid jolly(void);\nvoid deny(void);\n\n// main 函数写在开头，符合习惯\nint main(void) &#123;\n    jolly();  // 调用函数\n    deny();\n\n    return 0;\n&#125;\n\n// 定义函数\nvoid jolly(void) &#123;\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n    printf(&quot;For he&#39;s a jolly good fellow!\\n&quot;);\n&#125;\n// 定义函数\nvoid deny(void) &#123;\n    printf(&quot;Which nobody can deny!\\n&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>For he&#39;s a jolly good fellow!\nFor he&#39;s a jolly good fellow!\nFor he&#39;s a jolly good fellow!\nWhich nobody can deny!\n</code></pre>\n<h2 id=\"第-5-题\"><a href=\"#第-5-题\" class=\"headerlink\" title=\"第 5 题\"></a>第 5 题</h2><p>练习多个函数</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\n// 声明函数。void 分别表示无参数、无返回值\nvoid br(void);\nvoid ic(void);\n\n// main 函数写在开头，符合习惯\nint main(void) &#123;\n    br();  // 调用函数\n    printf(&quot;, &quot;);\n    ic();\n    printf(&quot;\\n&quot;);\n    ic();\n    printf(&quot;,\\n&quot;);\n    br();\n\n    return 0;\n&#125;\n\n// 定义函数\nvoid br(void) &#123;\n    printf(&quot;Brazil, Russia&quot;);\n&#125;\n// 定义函数\nvoid ic(void) &#123;\n    printf(&quot;India, China&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Brazil, Russia, India, China\nIndia, China,\nBrazil, Russia\n</code></pre>\n<h2 id=\"第-6-题\"><a href=\"#第-6-题\" class=\"headerlink\" title=\"第 6 题\"></a>第 6 题</h2><p>练习变量和计算，占位符输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int toes;\n    toes = 10;\n\n    printf(&quot;toes * 2 = %d\\n&quot;, toes * 2);\n    printf(&quot;toes ^ 2 = %d\\n&quot;, toes * toes);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>toes * 2 = 20\ntoes ^ 2 = 100\n</code></pre>\n<h2 id=\"第-7-题\"><a href=\"#第-7-题\" class=\"headerlink\" title=\"第 7 题\"></a>第 7 题</h2><p>练习函数定义和调用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid smile(void);\n\nint main(void) &#123;\n    smile();\n    smile();\n    smile();\n    printf(&quot;\\n&quot;);\n    smile();\n    smile();\n    printf(&quot;\\n&quot;);\n    smile();\n\n    return 0;\n&#125;\n\nvoid smile(void) &#123;\n    printf(&quot;Smile!&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Smile!Smile!Smile!\nSmile!Smile!\nSmile!\n</code></pre>\n<h2 id=\"第-8-题\"><a href=\"#第-8-题\" class=\"headerlink\" title=\"第 8 题\"></a>第 8 题</h2><p>练习函数嵌套调用</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid one_three(void);\nvoid two(void);\n\nint main(void) &#123;\n    printf(&quot;starting now:\\n&quot;);\n    one_three();\n    printf(&quot;done!&quot;);\n\n    return 0;\n&#125;\n\n// 函数定义位置并不影响调用\nvoid one_three(void) &#123;\n    printf(&quot;one\\n&quot;);\n    two();\n    printf(&quot;three\\n&quot;);\n&#125;\nvoid two(void) &#123;\n    printf(&quot;two\\n&quot;);\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>starting now:\none\ntwo\nthree\ndone!\n</code></pre>\n<h1 id=\"第3章-数据和C\"><a href=\"#第3章-数据和C\" class=\"headerlink\" title=\"第3章 数据和C\"></a>第3章 数据和C</h1><h2 id=\"第-2-题-1\"><a href=\"#第-2-题-1\" class=\"headerlink\" title=\"第 2 题\"></a>第 2 题</h2><pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    char ch;\n\n    printf(&quot;Please type a ascii code: &quot;);\n    scanf(&quot;%c&quot;, &amp;ch);\n    printf(&quot;char of code is %d&quot;, ch);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a ascii code: A\nchar of code is 65\n</code></pre>\n<h2 id=\"第-4-题-1\"><a href=\"#第-4-题-1\" class=\"headerlink\" title=\"第 4 题\"></a>第 4 题</h2><p>浮点数的输入和输出</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float f;\n\n    printf(&quot;Please type a num of float: &quot;);\n    scanf(&quot;%f&quot;, &amp;f);\n    printf(&quot;float is %f\\n&quot;, f);\n    printf(&quot;float e is %e\\n&quot;, f);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n</code></pre>\n<h2 id=\"第-5-题-1\"><a href=\"#第-5-题-1\" class=\"headerlink\" title=\"第 5 题\"></a>第 5 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    float f;\n\n    printf(&quot;Please type a num of float: &quot;);\n    scanf(&quot;%f&quot;, &amp;f);\n    printf(&quot;float is %f\\n&quot;, f);\n    printf(&quot;float e is %e\\n&quot;, f);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>Please type a num of float: 121212.4324234\nfloat is 121212.429688\nfloat e is 1.212124e+05\n</code></pre>\n<h2 id=\"第-6-题-1\"><a href=\"#第-6-题-1\" class=\"headerlink\" title=\"第 6 题\"></a>第 6 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;\n\n    printf(&quot;请输入水的夸脱数：&quot;);\n    scanf(&quot;%d&quot;, &amp;num);\n    printf(&quot;水分子数量为：%e\\n&quot;, num * 950 / 3e-23);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n</code></pre>\n<h2 id=\"第-7-题-1\"><a href=\"#第-7-题-1\" class=\"headerlink\" title=\"第 7 题\"></a>第 7 题</h2><p>浮点数运算</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;\n    int num;\n\n    printf(&quot;请输入水的夸脱数：&quot;);\n    scanf(&quot;%d&quot;, &amp;num);\n    printf(&quot;水分子数量为：%e\\n&quot;, num * 950 / 3e-23);\n\n    return 0;\n&#125;\n</code></pre>\n<p>输出</p>\n<pre><code>请输入水的夸脱数：1\n水分子数量为：3.166667e+25\n</code></pre>\n"},{"title":"C-C示例程序及解释","date":"2023-05-27T04:35:41.000Z","_content":"\n# 示例程序\n\n```c\n#include <stdio.h>\n\nint main(void) {  // C 标准写法\n  int num;  // 定义一个变量\n  num = 1;  /* 为变量赋值 */\n  \n  printf(\"I am a simple computer\\n\");  // 调用函数\n  printf(\"My favorite number is %d\", num);\n  \n  return 0;\n}\n```\n\n输出：\n\n```\nI am a simple computer\nMy favorite number is 1\n```\n\n# 解释\n\n`#include <stdio.h>`：头文件\n\n* 该行告诉编译器把 stdio.h 中的内容包含在当前程序中。\n* stdio.h 是 C 编译器软件包的标准部分，它提供键盘输入和屏幕输出的支持。\n\n`int main(void) {}`：函数\n\n* 所有的 C 程序一定从 `main()` 函数开始执行，`main()` 函数约定俗成放在第一位。\n* `int` 定义了函数的返回值、`main` 定义函数名、`(void)` 定义参数值（void 表示没有任何参数）、`{}` 定义函数体。\n\n`int num;`：声明一个类型为 int，名为 num 的变量。\n\n* 为变量在内存中分配存储空间，将变量与内存空间对应，确定**位置信息**和**空间大小**（类型作用）。\n* **所有变量必须声明再使用**。\n* 可以用大小写字母、数字、下划线来命名，第一个字符不能是数字。\n\n`num = 1;`：把值 1 赋给变量 num。\n\n`printf(\"I am a simple computer\\n\");`：调用函数\n\n`return 0;`：返回值\n\n* 给调用方返回值，这里给操作系统返回。\n\n\n\n","source":"_posts/C语言/C-C示例程序及解释.md","raw":"---\ntitle: C-C示例程序及解释\ncategories:\n  - 编程语言\n  - C\ntags:\n  - C\ndate: 2023-05-27 12:35:41\n---\n\n# 示例程序\n\n```c\n#include <stdio.h>\n\nint main(void) {  // C 标准写法\n  int num;  // 定义一个变量\n  num = 1;  /* 为变量赋值 */\n  \n  printf(\"I am a simple computer\\n\");  // 调用函数\n  printf(\"My favorite number is %d\", num);\n  \n  return 0;\n}\n```\n\n输出：\n\n```\nI am a simple computer\nMy favorite number is 1\n```\n\n# 解释\n\n`#include <stdio.h>`：头文件\n\n* 该行告诉编译器把 stdio.h 中的内容包含在当前程序中。\n* stdio.h 是 C 编译器软件包的标准部分，它提供键盘输入和屏幕输出的支持。\n\n`int main(void) {}`：函数\n\n* 所有的 C 程序一定从 `main()` 函数开始执行，`main()` 函数约定俗成放在第一位。\n* `int` 定义了函数的返回值、`main` 定义函数名、`(void)` 定义参数值（void 表示没有任何参数）、`{}` 定义函数体。\n\n`int num;`：声明一个类型为 int，名为 num 的变量。\n\n* 为变量在内存中分配存储空间，将变量与内存空间对应，确定**位置信息**和**空间大小**（类型作用）。\n* **所有变量必须声明再使用**。\n* 可以用大小写字母、数字、下划线来命名，第一个字符不能是数字。\n\n`num = 1;`：把值 1 赋给变量 num。\n\n`printf(\"I am a simple computer\\n\");`：调用函数\n\n`return 0;`：返回值\n\n* 给调用方返回值，这里给操作系统返回。\n\n\n\n","slug":"C语言-C-C示例程序及解释","published":1,"updated":"2023-06-14T03:07:51.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siau0007m0t5693152gt","content":"<h1 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h1><pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;  // C 标准写法\n  int num;  // 定义一个变量\n  num = 1;  /* 为变量赋值 */\n  \n  printf(&quot;I am a simple computer\\n&quot;);  // 调用函数\n  printf(&quot;My favorite number is %d&quot;, num);\n  \n  return 0;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I am a simple computer\nMy favorite number is 1\n</code></pre>\n<h1 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h1><p><code>#include &lt;stdio.h&gt;</code>：头文件</p>\n<ul>\n<li>该行告诉编译器把 stdio.h 中的内容包含在当前程序中。</li>\n<li>stdio.h 是 C 编译器软件包的标准部分，它提供键盘输入和屏幕输出的支持。</li>\n</ul>\n<p><code>int main(void) &#123;&#125;</code>：函数</p>\n<ul>\n<li>所有的 C 程序一定从 <code>main()</code> 函数开始执行，<code>main()</code> 函数约定俗成放在第一位。</li>\n<li><code>int</code> 定义了函数的返回值、<code>main</code> 定义函数名、<code>(void)</code> 定义参数值（void 表示没有任何参数）、<code>&#123;&#125;</code> 定义函数体。</li>\n</ul>\n<p><code>int num;</code>：声明一个类型为 int，名为 num 的变量。</p>\n<ul>\n<li>为变量在内存中分配存储空间，将变量与内存空间对应，确定<strong>位置信息</strong>和<strong>空间大小</strong>（类型作用）。</li>\n<li><strong>所有变量必须声明再使用</strong>。</li>\n<li>可以用大小写字母、数字、下划线来命名，第一个字符不能是数字。</li>\n</ul>\n<p><code>num = 1;</code>：把值 1 赋给变量 num。</p>\n<p><code>printf(&quot;I am a simple computer\\n&quot;);</code>：调用函数</p>\n<p><code>return 0;</code>：返回值</p>\n<ul>\n<li>给调用方返回值，这里给操作系统返回。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h1><pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(void) &#123;  // C 标准写法\n  int num;  // 定义一个变量\n  num = 1;  /* 为变量赋值 */\n  \n  printf(&quot;I am a simple computer\\n&quot;);  // 调用函数\n  printf(&quot;My favorite number is %d&quot;, num);\n  \n  return 0;\n&#125;\n</code></pre>\n<p>输出：</p>\n<pre><code>I am a simple computer\nMy favorite number is 1\n</code></pre>\n<h1 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h1><p><code>#include &lt;stdio.h&gt;</code>：头文件</p>\n<ul>\n<li>该行告诉编译器把 stdio.h 中的内容包含在当前程序中。</li>\n<li>stdio.h 是 C 编译器软件包的标准部分，它提供键盘输入和屏幕输出的支持。</li>\n</ul>\n<p><code>int main(void) &#123;&#125;</code>：函数</p>\n<ul>\n<li>所有的 C 程序一定从 <code>main()</code> 函数开始执行，<code>main()</code> 函数约定俗成放在第一位。</li>\n<li><code>int</code> 定义了函数的返回值、<code>main</code> 定义函数名、<code>(void)</code> 定义参数值（void 表示没有任何参数）、<code>&#123;&#125;</code> 定义函数体。</li>\n</ul>\n<p><code>int num;</code>：声明一个类型为 int，名为 num 的变量。</p>\n<ul>\n<li>为变量在内存中分配存储空间，将变量与内存空间对应，确定<strong>位置信息</strong>和<strong>空间大小</strong>（类型作用）。</li>\n<li><strong>所有变量必须声明再使用</strong>。</li>\n<li>可以用大小写字母、数字、下划线来命名，第一个字符不能是数字。</li>\n</ul>\n<p><code>num = 1;</code>：把值 1 赋给变量 num。</p>\n<p><code>printf(&quot;I am a simple computer\\n&quot;);</code>：调用函数</p>\n<p><code>return 0;</code>：返回值</p>\n<ul>\n<li>给调用方返回值，这里给操作系统返回。</li>\n</ul>\n"},{"title":"七牛云备份","date":"2023-05-25T16:32:28.000Z","_content":"\n# 需求\n\nMarkdown 的图片都是外链形式，存储在七牛云上（每月免费 10G 流量）\n\n为了安全，需要备份图片\n\n# 步骤\n\n## 1. 下载 qshell\n\n[qiniu/qshell](https://github.com/qiniu/qshell) 是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具\n\n配置环境变量\n\n## 2. 配置 qshell\n\n用户目录新建配置文件 ~/.qshell.json\n\n```json\n{\n\t\"access_key\": \"XXXXX\",\n\t\"secret_key\": \"XXXXX\",\n\t\"bucket\": \"xxxx\",\n\t\"domain\": \"cdn.xxx.com\",\n\t\"dest_dir\": \"/Users/collin/Documents/Backup/Qiniu\"\n}\n```\n\n* access_key 和 secret_key：七牛云的访问 key，在右上角头像 -> 秘钥管理\n* bucket：空间名\n* domain：CDN 加速域名\n* dest_dir：备份文件夹路径\n\n## 3. 备份\n\n`qdownload`：从七牛空间同步数据到本地，支持只同步某些前缀的文件，支持增量同步（配置式）\n\n```bash\n$ qshell qdownload ~/.qshell.json\n\n[I]  Downloading: images/202206231712647.png\t38882\n...\n[I]  -------Download Result-------\n[I]      Total:        82\n[I]    Skipped:         0\n[I]     Exists:         0\n[I]    Success:        82\n[I]     Update:         0\n[I]    Failure:         0\n[I]   Duration:        10s\n[I]  -----------------------------\n[I]  See download log at path\n```\n\n","source":"_posts/Hexo/七牛云备份.md","raw":"---\ntitle: 七牛云备份\ncategories:\n  - 工具\n  - Hexo\ntags:\n  - Hexo\ndate: 2023-05-26 00:32:28\n---\n\n# 需求\n\nMarkdown 的图片都是外链形式，存储在七牛云上（每月免费 10G 流量）\n\n为了安全，需要备份图片\n\n# 步骤\n\n## 1. 下载 qshell\n\n[qiniu/qshell](https://github.com/qiniu/qshell) 是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具\n\n配置环境变量\n\n## 2. 配置 qshell\n\n用户目录新建配置文件 ~/.qshell.json\n\n```json\n{\n\t\"access_key\": \"XXXXX\",\n\t\"secret_key\": \"XXXXX\",\n\t\"bucket\": \"xxxx\",\n\t\"domain\": \"cdn.xxx.com\",\n\t\"dest_dir\": \"/Users/collin/Documents/Backup/Qiniu\"\n}\n```\n\n* access_key 和 secret_key：七牛云的访问 key，在右上角头像 -> 秘钥管理\n* bucket：空间名\n* domain：CDN 加速域名\n* dest_dir：备份文件夹路径\n\n## 3. 备份\n\n`qdownload`：从七牛空间同步数据到本地，支持只同步某些前缀的文件，支持增量同步（配置式）\n\n```bash\n$ qshell qdownload ~/.qshell.json\n\n[I]  Downloading: images/202206231712647.png\t38882\n...\n[I]  -------Download Result-------\n[I]      Total:        82\n[I]    Skipped:         0\n[I]     Exists:         0\n[I]    Success:        82\n[I]     Update:         0\n[I]    Failure:         0\n[I]   Duration:        10s\n[I]  -----------------------------\n[I]  See download log at path\n```\n\n","slug":"Hexo-七牛云备份","published":1,"updated":"2023-06-14T03:07:51.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siaw000bm0t5gykx3mjr","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Markdown 的图片都是外链形式，存储在七牛云上（每月免费 10G 流量）</p>\n<p>为了安全，需要备份图片</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-下载-qshell\"><a href=\"#1-下载-qshell\" class=\"headerlink\" title=\"1. 下载 qshell\"></a>1. 下载 qshell</h2><p><a href=\"https://github.com/qiniu/qshell\">qiniu&#x2F;qshell</a> 是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具</p>\n<p>配置环境变量</p>\n<h2 id=\"2-配置-qshell\"><a href=\"#2-配置-qshell\" class=\"headerlink\" title=\"2. 配置 qshell\"></a>2. 配置 qshell</h2><p>用户目录新建配置文件 ~&#x2F;.qshell.json</p>\n<pre><code class=\"json\">&#123;\n    &quot;access_key&quot;: &quot;XXXXX&quot;,\n    &quot;secret_key&quot;: &quot;XXXXX&quot;,\n    &quot;bucket&quot;: &quot;xxxx&quot;,\n    &quot;domain&quot;: &quot;cdn.xxx.com&quot;,\n    &quot;dest_dir&quot;: &quot;/Users/collin/Documents/Backup/Qiniu&quot;\n&#125;\n</code></pre>\n<ul>\n<li>access_key 和 secret_key：七牛云的访问 key，在右上角头像 -&gt; 秘钥管理</li>\n<li>bucket：空间名</li>\n<li>domain：CDN 加速域名</li>\n<li>dest_dir：备份文件夹路径</li>\n</ul>\n<h2 id=\"3-备份\"><a href=\"#3-备份\" class=\"headerlink\" title=\"3. 备份\"></a>3. 备份</h2><p><code>qdownload</code>：从七牛空间同步数据到本地，支持只同步某些前缀的文件，支持增量同步（配置式）</p>\n<pre><code class=\"bash\">$ qshell qdownload ~/.qshell.json\n\n[I]  Downloading: images/202206231712647.png\t38882\n...\n[I]  -------Download Result-------\n[I]      Total:        82\n[I]    Skipped:         0\n[I]     Exists:         0\n[I]    Success:        82\n[I]     Update:         0\n[I]    Failure:         0\n[I]   Duration:        10s\n[I]  -----------------------------\n[I]  See download log at path\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Markdown 的图片都是外链形式，存储在七牛云上（每月免费 10G 流量）</p>\n<p>为了安全，需要备份图片</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-下载-qshell\"><a href=\"#1-下载-qshell\" class=\"headerlink\" title=\"1. 下载 qshell\"></a>1. 下载 qshell</h2><p><a href=\"https://github.com/qiniu/qshell\">qiniu&#x2F;qshell</a> 是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具</p>\n<p>配置环境变量</p>\n<h2 id=\"2-配置-qshell\"><a href=\"#2-配置-qshell\" class=\"headerlink\" title=\"2. 配置 qshell\"></a>2. 配置 qshell</h2><p>用户目录新建配置文件 ~&#x2F;.qshell.json</p>\n<pre><code class=\"json\">&#123;\n    &quot;access_key&quot;: &quot;XXXXX&quot;,\n    &quot;secret_key&quot;: &quot;XXXXX&quot;,\n    &quot;bucket&quot;: &quot;xxxx&quot;,\n    &quot;domain&quot;: &quot;cdn.xxx.com&quot;,\n    &quot;dest_dir&quot;: &quot;/Users/collin/Documents/Backup/Qiniu&quot;\n&#125;\n</code></pre>\n<ul>\n<li>access_key 和 secret_key：七牛云的访问 key，在右上角头像 -&gt; 秘钥管理</li>\n<li>bucket：空间名</li>\n<li>domain：CDN 加速域名</li>\n<li>dest_dir：备份文件夹路径</li>\n</ul>\n<h2 id=\"3-备份\"><a href=\"#3-备份\" class=\"headerlink\" title=\"3. 备份\"></a>3. 备份</h2><p><code>qdownload</code>：从七牛空间同步数据到本地，支持只同步某些前缀的文件，支持增量同步（配置式）</p>\n<pre><code class=\"bash\">$ qshell qdownload ~/.qshell.json\n\n[I]  Downloading: images/202206231712647.png\t38882\n...\n[I]  -------Download Result-------\n[I]      Total:        82\n[I]    Skipped:         0\n[I]     Exists:         0\n[I]    Success:        82\n[I]     Update:         0\n[I]    Failure:         0\n[I]   Duration:        10s\n[I]  -----------------------------\n[I]  See download log at path\n</code></pre>\n"},{"title":"Hexo-数据备份","date":"2023-05-25T07:53:28.000Z","_content":"\n# 需求\n\n防止博客原始数据丢失。\n\n博客内容已上传到 Github Page（不重要，有原始数据就可以再生成），需要备份博客原始数据。\n\n# 步骤\n\n## 1. 初始化 git 仓库\n\n在博客根目录下初始化 git 仓库\n\n\n## 2. 配置 git 仓库\n\n不需要备份所有文件，创建 `.gitignore` 排除文件\n\n```\n.DS_Store\n*.log\ndb.json\n\n.deploy_git/\n.git/\n.github/\n\nnode_modules/\npublic/\n```\n\nGithub 和 Gitee 创建备份仓库，双重备份\n\n添加两个远程仓库，参考《Git-一份代码同时提交两个仓库》\n\n## 3. 配置命令别名\n\n写入到配置文件中，生效一下\n\n```\nalias hn='hexo new post'\nalias hs='hexo clean && hexo g && hexo s --debug'\nalias hd='hexo clean && hexo g && hexo d && git add . && git commit -m \"update\" && git push -f'\n```\n\n## 4. 测试\n\n此时执行 hd 命令即可：部署博客&备份博客原始数据\n\n妈妈再也不用担心我的博客丢失啦\n\nTODO：markdown 中的外链也需要定期备份\n\n","source":"_posts/Hexo/Hexo-数据备份.md","raw":"---\ntitle: Hexo-数据备份\ncategories:\n  - 工具\n  - Hexo\ntags:\n  - hexo\ndate: 2023-05-25 15:53:28\n---\n\n# 需求\n\n防止博客原始数据丢失。\n\n博客内容已上传到 Github Page（不重要，有原始数据就可以再生成），需要备份博客原始数据。\n\n# 步骤\n\n## 1. 初始化 git 仓库\n\n在博客根目录下初始化 git 仓库\n\n\n## 2. 配置 git 仓库\n\n不需要备份所有文件，创建 `.gitignore` 排除文件\n\n```\n.DS_Store\n*.log\ndb.json\n\n.deploy_git/\n.git/\n.github/\n\nnode_modules/\npublic/\n```\n\nGithub 和 Gitee 创建备份仓库，双重备份\n\n添加两个远程仓库，参考《Git-一份代码同时提交两个仓库》\n\n## 3. 配置命令别名\n\n写入到配置文件中，生效一下\n\n```\nalias hn='hexo new post'\nalias hs='hexo clean && hexo g && hexo s --debug'\nalias hd='hexo clean && hexo g && hexo d && git add . && git commit -m \"update\" && git push -f'\n```\n\n## 4. 测试\n\n此时执行 hd 命令即可：部署博客&备份博客原始数据\n\n妈妈再也不用担心我的博客丢失啦\n\nTODO：markdown 中的外链也需要定期备份\n\n","slug":"Hexo-Hexo-数据备份","published":1,"updated":"2023-06-14T03:07:51.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siaw000dm0t5epbicl36","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>防止博客原始数据丢失。</p>\n<p>博客内容已上传到 Github Page（不重要，有原始数据就可以再生成），需要备份博客原始数据。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-初始化-git-仓库\"><a href=\"#1-初始化-git-仓库\" class=\"headerlink\" title=\"1. 初始化 git 仓库\"></a>1. 初始化 git 仓库</h2><p>在博客根目录下初始化 git 仓库</p>\n<h2 id=\"2-配置-git-仓库\"><a href=\"#2-配置-git-仓库\" class=\"headerlink\" title=\"2. 配置 git 仓库\"></a>2. 配置 git 仓库</h2><p>不需要备份所有文件，创建 <code>.gitignore</code> 排除文件</p>\n<pre><code>.DS_Store\n*.log\ndb.json\n\n.deploy_git/\n.git/\n.github/\n\nnode_modules/\npublic/\n</code></pre>\n<p>Github 和 Gitee 创建备份仓库，双重备份</p>\n<p>添加两个远程仓库，参考《Git-一份代码同时提交两个仓库》</p>\n<h2 id=\"3-配置命令别名\"><a href=\"#3-配置命令别名\" class=\"headerlink\" title=\"3. 配置命令别名\"></a>3. 配置命令别名</h2><p>写入到配置文件中，生效一下</p>\n<pre><code>alias hn=&#39;hexo new post&#39;\nalias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug&#39;\nalias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#39;\n</code></pre>\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>此时执行 hd 命令即可：部署博客&amp;备份博客原始数据</p>\n<p>妈妈再也不用担心我的博客丢失啦</p>\n<p>TODO：markdown 中的外链也需要定期备份</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>防止博客原始数据丢失。</p>\n<p>博客内容已上传到 Github Page（不重要，有原始数据就可以再生成），需要备份博客原始数据。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-初始化-git-仓库\"><a href=\"#1-初始化-git-仓库\" class=\"headerlink\" title=\"1. 初始化 git 仓库\"></a>1. 初始化 git 仓库</h2><p>在博客根目录下初始化 git 仓库</p>\n<h2 id=\"2-配置-git-仓库\"><a href=\"#2-配置-git-仓库\" class=\"headerlink\" title=\"2. 配置 git 仓库\"></a>2. 配置 git 仓库</h2><p>不需要备份所有文件，创建 <code>.gitignore</code> 排除文件</p>\n<pre><code>.DS_Store\n*.log\ndb.json\n\n.deploy_git/\n.git/\n.github/\n\nnode_modules/\npublic/\n</code></pre>\n<p>Github 和 Gitee 创建备份仓库，双重备份</p>\n<p>添加两个远程仓库，参考《Git-一份代码同时提交两个仓库》</p>\n<h2 id=\"3-配置命令别名\"><a href=\"#3-配置命令别名\" class=\"headerlink\" title=\"3. 配置命令别名\"></a>3. 配置命令别名</h2><p>写入到配置文件中，生效一下</p>\n<pre><code>alias hn=&#39;hexo new post&#39;\nalias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug&#39;\nalias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#39;\n</code></pre>\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>此时执行 hd 命令即可：部署博客&amp;备份博客原始数据</p>\n<p>妈妈再也不用担心我的博客丢失啦</p>\n<p>TODO：markdown 中的外链也需要定期备份</p>\n"},{"title":"Hexo-添加看板娘","date":"2023-05-25T07:53:28.000Z","_content":"\n# 低级看板娘安装步骤\n\n没有更多自定义功能\n\n## 1. 安装动画\n\n如果安装过要先卸载 `npm uninstall hexo-helper-live2d`\n\n```bash\n$ npm install --save hexo-helper-live2d\n```\n\n## 2. 安装模型\n\n```bash\n$ npm install live2d-widget-model-模型名称\n```\n\n模型名称可在 `node_modules/live2d-widget/README.md` 找到，推荐 `shizuku`\n\n## 3. 配置\n\n修改 Hexo 的配置文件 `_config.yml`\n\n```yaml\n## Live2D看板娘\nlive2d:\n  enable: true\n  pluginModelPath: assets/\n  model:\n    # 模板目录，在node_modules里\n    use: live2d-widget-model-shizuku  \n  display:\n    position: right\n    width: 300 \n    height: 600\n  mobile:\n    # 在手机端显示\n    show: false   \n  rect:\n    opacity:0.7\n```\n\n重新部署即可\n\n\n\n# 高级看板娘安装步骤\n\n可换装、可拍照、可说话、可互动\n\n## 1. fork 官方仓库\n\n[live2d-widget](https://github.com/stevenjoezhang/live2d-widget)，目的是自定义修改，同时利用 github 的官方 cdn\n\n## 2. 修改文件\n\n- autoload.js：自动加载看板娘；\n- waifu.css：看板娘样式；\n- waifu-tips.js：看板娘说话的脚本；\n- waifu-tips.json：看板娘说话的内容；\n\n### 2.1 修改看板娘加载路径\n\n修改 `autoload.js`\n\n```\n//注意：live2d_path参数应使用绝对路径\nconst live2d_path = \"https://cdn.jsdelivr.net/gh/Mculover666/live2d-widget/\";\n```\n\n> Mculover666 换成自己的 Github 用户名\n\n### 2.2 修改看板娘布局和样式\n\n修改 `waifu.css`\n\n```css\n#waifu {\n\tbottom: -1000px;\n\tright: 0;  // 看板娘位置\n\tline-height: 0;\n\tmargin-bottom: -10px;\n\tposition: fixed;\n\ttransform: translateY(3px);\n\ttransition: transform .3s ease-in-out, bottom 3s ease-in-out;\n\tz-index: 1;\n}\n\n#waifu-tool {\n\tcolor: #aaa;\n\topacity: 0;\n\tposition: absolute;\n\tleft: 10px;  // 看板娘工具栏位置\n\ttop: 70px;\n\ttransition: opacity 1s;\n}\n```\n\n### 2.3 提交到仓库\n\nadd commit push\n\n### 2.4 发布新版本\n\n由于使用了 Github 免费的 CDN 服务，所以还需要发布一个新的版本\n\n![发布 releases ](https://cdn.myshenle.top/images/202305251741064.png)\n\n## 3. 添加看板娘\n\nGithub上CDN的使用方式为\n`https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径`\n\n修改主页文件，添加以下代码\n\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/shenleg/live2d-widget@1.0.0/autoload.js\"></script>\n```\n\n## 4. 复活看板娘\n\n配置主题下的配置文件 `_config.yml` ，添加以下代码\n\n```yaml\n# ---------------------------------------------------------------\n# 自定义看板娘\n# ---------------------------------------------------------------\nlive2d:\n  enable: true\n```\n\n\n\n# 参考\n\n* [【Hexo搭建个人博客】（十二）Next主题中添加超级好玩的看板娘（CDN方式）](https://blog.51cto.com/u_13640625/3032364)\n","source":"_posts/Hexo/Hexo-添加看板娘.md","raw":"---\ntitle: Hexo-添加看板娘\ncategories:\n  - 工具\n  - Hexo\ntags:\n  - hexo\ndate: 2023-05-25 15:53:28\n---\n\n# 低级看板娘安装步骤\n\n没有更多自定义功能\n\n## 1. 安装动画\n\n如果安装过要先卸载 `npm uninstall hexo-helper-live2d`\n\n```bash\n$ npm install --save hexo-helper-live2d\n```\n\n## 2. 安装模型\n\n```bash\n$ npm install live2d-widget-model-模型名称\n```\n\n模型名称可在 `node_modules/live2d-widget/README.md` 找到，推荐 `shizuku`\n\n## 3. 配置\n\n修改 Hexo 的配置文件 `_config.yml`\n\n```yaml\n## Live2D看板娘\nlive2d:\n  enable: true\n  pluginModelPath: assets/\n  model:\n    # 模板目录，在node_modules里\n    use: live2d-widget-model-shizuku  \n  display:\n    position: right\n    width: 300 \n    height: 600\n  mobile:\n    # 在手机端显示\n    show: false   \n  rect:\n    opacity:0.7\n```\n\n重新部署即可\n\n\n\n# 高级看板娘安装步骤\n\n可换装、可拍照、可说话、可互动\n\n## 1. fork 官方仓库\n\n[live2d-widget](https://github.com/stevenjoezhang/live2d-widget)，目的是自定义修改，同时利用 github 的官方 cdn\n\n## 2. 修改文件\n\n- autoload.js：自动加载看板娘；\n- waifu.css：看板娘样式；\n- waifu-tips.js：看板娘说话的脚本；\n- waifu-tips.json：看板娘说话的内容；\n\n### 2.1 修改看板娘加载路径\n\n修改 `autoload.js`\n\n```\n//注意：live2d_path参数应使用绝对路径\nconst live2d_path = \"https://cdn.jsdelivr.net/gh/Mculover666/live2d-widget/\";\n```\n\n> Mculover666 换成自己的 Github 用户名\n\n### 2.2 修改看板娘布局和样式\n\n修改 `waifu.css`\n\n```css\n#waifu {\n\tbottom: -1000px;\n\tright: 0;  // 看板娘位置\n\tline-height: 0;\n\tmargin-bottom: -10px;\n\tposition: fixed;\n\ttransform: translateY(3px);\n\ttransition: transform .3s ease-in-out, bottom 3s ease-in-out;\n\tz-index: 1;\n}\n\n#waifu-tool {\n\tcolor: #aaa;\n\topacity: 0;\n\tposition: absolute;\n\tleft: 10px;  // 看板娘工具栏位置\n\ttop: 70px;\n\ttransition: opacity 1s;\n}\n```\n\n### 2.3 提交到仓库\n\nadd commit push\n\n### 2.4 发布新版本\n\n由于使用了 Github 免费的 CDN 服务，所以还需要发布一个新的版本\n\n![发布 releases ](https://cdn.myshenle.top/images/202305251741064.png)\n\n## 3. 添加看板娘\n\nGithub上CDN的使用方式为\n`https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径`\n\n修改主页文件，添加以下代码\n\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/shenleg/live2d-widget@1.0.0/autoload.js\"></script>\n```\n\n## 4. 复活看板娘\n\n配置主题下的配置文件 `_config.yml` ，添加以下代码\n\n```yaml\n# ---------------------------------------------------------------\n# 自定义看板娘\n# ---------------------------------------------------------------\nlive2d:\n  enable: true\n```\n\n\n\n# 参考\n\n* [【Hexo搭建个人博客】（十二）Next主题中添加超级好玩的看板娘（CDN方式）](https://blog.51cto.com/u_13640625/3032364)\n","slug":"Hexo-Hexo-添加看板娘","published":1,"updated":"2023-06-14T03:07:51.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siay000hm0t5azeo64r3","content":"<h1 id=\"低级看板娘安装步骤\"><a href=\"#低级看板娘安装步骤\" class=\"headerlink\" title=\"低级看板娘安装步骤\"></a>低级看板娘安装步骤</h1><p>没有更多自定义功能</p>\n<h2 id=\"1-安装动画\"><a href=\"#1-安装动画\" class=\"headerlink\" title=\"1. 安装动画\"></a>1. 安装动画</h2><p>如果安装过要先卸载 <code>npm uninstall hexo-helper-live2d</code></p>\n<pre><code class=\"bash\">$ npm install --save hexo-helper-live2d\n</code></pre>\n<h2 id=\"2-安装模型\"><a href=\"#2-安装模型\" class=\"headerlink\" title=\"2. 安装模型\"></a>2. 安装模型</h2><pre><code class=\"bash\">$ npm install live2d-widget-model-模型名称\n</code></pre>\n<p>模型名称可在 <code>node_modules/live2d-widget/README.md</code> 找到，推荐 <code>shizuku</code></p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>修改 Hexo 的配置文件 <code>_config.yml</code></p>\n<pre><code class=\"yaml\">## Live2D看板娘\nlive2d:\n  enable: true\n  pluginModelPath: assets/\n  model:\n    # 模板目录，在node_modules里\n    use: live2d-widget-model-shizuku  \n  display:\n    position: right\n    width: 300 \n    height: 600\n  mobile:\n    # 在手机端显示\n    show: false   \n  rect:\n    opacity:0.7\n</code></pre>\n<p>重新部署即可</p>\n<h1 id=\"高级看板娘安装步骤\"><a href=\"#高级看板娘安装步骤\" class=\"headerlink\" title=\"高级看板娘安装步骤\"></a>高级看板娘安装步骤</h1><p>可换装、可拍照、可说话、可互动</p>\n<h2 id=\"1-fork-官方仓库\"><a href=\"#1-fork-官方仓库\" class=\"headerlink\" title=\"1. fork 官方仓库\"></a>1. fork 官方仓库</h2><p><a href=\"https://github.com/stevenjoezhang/live2d-widget\">live2d-widget</a>，目的是自定义修改，同时利用 github 的官方 cdn</p>\n<h2 id=\"2-修改文件\"><a href=\"#2-修改文件\" class=\"headerlink\" title=\"2. 修改文件\"></a>2. 修改文件</h2><ul>\n<li>autoload.js：自动加载看板娘；</li>\n<li>waifu.css：看板娘样式；</li>\n<li>waifu-tips.js：看板娘说话的脚本；</li>\n<li>waifu-tips.json：看板娘说话的内容；</li>\n</ul>\n<h3 id=\"2-1-修改看板娘加载路径\"><a href=\"#2-1-修改看板娘加载路径\" class=\"headerlink\" title=\"2.1 修改看板娘加载路径\"></a>2.1 修改看板娘加载路径</h3><p>修改 <code>autoload.js</code></p>\n<pre><code>//注意：live2d_path参数应使用绝对路径\nconst live2d_path = &quot;https://cdn.jsdelivr.net/gh/Mculover666/live2d-widget/&quot;;\n</code></pre>\n<blockquote>\n<p>Mculover666 换成自己的 Github 用户名</p>\n</blockquote>\n<h3 id=\"2-2-修改看板娘布局和样式\"><a href=\"#2-2-修改看板娘布局和样式\" class=\"headerlink\" title=\"2.2 修改看板娘布局和样式\"></a>2.2 修改看板娘布局和样式</h3><p>修改 <code>waifu.css</code></p>\n<pre><code class=\"css\">#waifu &#123;\n    bottom: -1000px;\n    right: 0;  // 看板娘位置\n    line-height: 0;\n    margin-bottom: -10px;\n    position: fixed;\n    transform: translateY(3px);\n    transition: transform .3s ease-in-out, bottom 3s ease-in-out;\n    z-index: 1;\n&#125;\n\n#waifu-tool &#123;\n    color: #aaa;\n    opacity: 0;\n    position: absolute;\n    left: 10px;  // 看板娘工具栏位置\n    top: 70px;\n    transition: opacity 1s;\n&#125;\n</code></pre>\n<h3 id=\"2-3-提交到仓库\"><a href=\"#2-3-提交到仓库\" class=\"headerlink\" title=\"2.3 提交到仓库\"></a>2.3 提交到仓库</h3><p>add commit push</p>\n<h3 id=\"2-4-发布新版本\"><a href=\"#2-4-发布新版本\" class=\"headerlink\" title=\"2.4 发布新版本\"></a>2.4 发布新版本</h3><p>由于使用了 Github 免费的 CDN 服务，所以还需要发布一个新的版本</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251741064.png\" alt=\"发布 releases \"></p>\n<h2 id=\"3-添加看板娘\"><a href=\"#3-添加看板娘\" class=\"headerlink\" title=\"3. 添加看板娘\"></a>3. 添加看板娘</h2><p>Github上CDN的使用方式为<br><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p>\n<p>修改主页文件，添加以下代码</p>\n<pre><code class=\"html\">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/shenleg/live2d-widget@1.0.0/autoload.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h2 id=\"4-复活看板娘\"><a href=\"#4-复活看板娘\" class=\"headerlink\" title=\"4. 复活看板娘\"></a>4. 复活看板娘</h2><p>配置主题下的配置文件 <code>_config.yml</code> ，添加以下代码</p>\n<pre><code class=\"yaml\"># ---------------------------------------------------------------\n# 自定义看板娘\n# ---------------------------------------------------------------\nlive2d:\n  enable: true\n</code></pre>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.51cto.com/u_13640625/3032364\">【Hexo搭建个人博客】（十二）Next主题中添加超级好玩的看板娘（CDN方式）</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"低级看板娘安装步骤\"><a href=\"#低级看板娘安装步骤\" class=\"headerlink\" title=\"低级看板娘安装步骤\"></a>低级看板娘安装步骤</h1><p>没有更多自定义功能</p>\n<h2 id=\"1-安装动画\"><a href=\"#1-安装动画\" class=\"headerlink\" title=\"1. 安装动画\"></a>1. 安装动画</h2><p>如果安装过要先卸载 <code>npm uninstall hexo-helper-live2d</code></p>\n<pre><code class=\"bash\">$ npm install --save hexo-helper-live2d\n</code></pre>\n<h2 id=\"2-安装模型\"><a href=\"#2-安装模型\" class=\"headerlink\" title=\"2. 安装模型\"></a>2. 安装模型</h2><pre><code class=\"bash\">$ npm install live2d-widget-model-模型名称\n</code></pre>\n<p>模型名称可在 <code>node_modules/live2d-widget/README.md</code> 找到，推荐 <code>shizuku</code></p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><p>修改 Hexo 的配置文件 <code>_config.yml</code></p>\n<pre><code class=\"yaml\">## Live2D看板娘\nlive2d:\n  enable: true\n  pluginModelPath: assets/\n  model:\n    # 模板目录，在node_modules里\n    use: live2d-widget-model-shizuku  \n  display:\n    position: right\n    width: 300 \n    height: 600\n  mobile:\n    # 在手机端显示\n    show: false   \n  rect:\n    opacity:0.7\n</code></pre>\n<p>重新部署即可</p>\n<h1 id=\"高级看板娘安装步骤\"><a href=\"#高级看板娘安装步骤\" class=\"headerlink\" title=\"高级看板娘安装步骤\"></a>高级看板娘安装步骤</h1><p>可换装、可拍照、可说话、可互动</p>\n<h2 id=\"1-fork-官方仓库\"><a href=\"#1-fork-官方仓库\" class=\"headerlink\" title=\"1. fork 官方仓库\"></a>1. fork 官方仓库</h2><p><a href=\"https://github.com/stevenjoezhang/live2d-widget\">live2d-widget</a>，目的是自定义修改，同时利用 github 的官方 cdn</p>\n<h2 id=\"2-修改文件\"><a href=\"#2-修改文件\" class=\"headerlink\" title=\"2. 修改文件\"></a>2. 修改文件</h2><ul>\n<li>autoload.js：自动加载看板娘；</li>\n<li>waifu.css：看板娘样式；</li>\n<li>waifu-tips.js：看板娘说话的脚本；</li>\n<li>waifu-tips.json：看板娘说话的内容；</li>\n</ul>\n<h3 id=\"2-1-修改看板娘加载路径\"><a href=\"#2-1-修改看板娘加载路径\" class=\"headerlink\" title=\"2.1 修改看板娘加载路径\"></a>2.1 修改看板娘加载路径</h3><p>修改 <code>autoload.js</code></p>\n<pre><code>//注意：live2d_path参数应使用绝对路径\nconst live2d_path = &quot;https://cdn.jsdelivr.net/gh/Mculover666/live2d-widget/&quot;;\n</code></pre>\n<blockquote>\n<p>Mculover666 换成自己的 Github 用户名</p>\n</blockquote>\n<h3 id=\"2-2-修改看板娘布局和样式\"><a href=\"#2-2-修改看板娘布局和样式\" class=\"headerlink\" title=\"2.2 修改看板娘布局和样式\"></a>2.2 修改看板娘布局和样式</h3><p>修改 <code>waifu.css</code></p>\n<pre><code class=\"css\">#waifu &#123;\n    bottom: -1000px;\n    right: 0;  // 看板娘位置\n    line-height: 0;\n    margin-bottom: -10px;\n    position: fixed;\n    transform: translateY(3px);\n    transition: transform .3s ease-in-out, bottom 3s ease-in-out;\n    z-index: 1;\n&#125;\n\n#waifu-tool &#123;\n    color: #aaa;\n    opacity: 0;\n    position: absolute;\n    left: 10px;  // 看板娘工具栏位置\n    top: 70px;\n    transition: opacity 1s;\n&#125;\n</code></pre>\n<h3 id=\"2-3-提交到仓库\"><a href=\"#2-3-提交到仓库\" class=\"headerlink\" title=\"2.3 提交到仓库\"></a>2.3 提交到仓库</h3><p>add commit push</p>\n<h3 id=\"2-4-发布新版本\"><a href=\"#2-4-发布新版本\" class=\"headerlink\" title=\"2.4 发布新版本\"></a>2.4 发布新版本</h3><p>由于使用了 Github 免费的 CDN 服务，所以还需要发布一个新的版本</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251741064.png\" alt=\"发布 releases \"></p>\n<h2 id=\"3-添加看板娘\"><a href=\"#3-添加看板娘\" class=\"headerlink\" title=\"3. 添加看板娘\"></a>3. 添加看板娘</h2><p>Github上CDN的使用方式为<br><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></p>\n<p>修改主页文件，添加以下代码</p>\n<pre><code class=\"html\">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/shenleg/live2d-widget@1.0.0/autoload.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h2 id=\"4-复活看板娘\"><a href=\"#4-复活看板娘\" class=\"headerlink\" title=\"4. 复活看板娘\"></a>4. 复活看板娘</h2><p>配置主题下的配置文件 <code>_config.yml</code> ，添加以下代码</p>\n<pre><code class=\"yaml\"># ---------------------------------------------------------------\n# 自定义看板娘\n# ---------------------------------------------------------------\nlive2d:\n  enable: true\n</code></pre>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.51cto.com/u_13640625/3032364\">【Hexo搭建个人博客】（十二）Next主题中添加超级好玩的看板娘（CDN方式）</a></li>\n</ul>\n"},{"title":"Jenkins-模版","top":1,"date":"2023-05-25T02:57:58.000Z","_content":"\n# 需求\n\n# 步骤\n\n# 参考\n","source":"_posts/Jenkins/Jenkins-模版.md","raw":"---\ntitle: Jenkins-模版\ncategories:\n  - 工具\n  - Jenkins\ntags:\n  - Jenkins\ntop: 1\ndate: 2023-05-25 10:57:58\n---\n\n# 需求\n\n# 步骤\n\n# 参考\n","slug":"Jenkins-Jenkins-模版","published":1,"updated":"2023-06-14T03:07:51.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib0000jm0t5ad3gfe5e","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1>"},{"title":"Jenkins-Gitlab构建配置","date":"2023-05-25T02:58:19.000Z","_content":"\n# 需求\n\n推送代码、合并代码即可构建应用，不需要进入页面手动点击\n\n# 步骤\n\n## 1. Jenkins 配置\n\n### 1.1 安装插件\n\ngitlab\n\n### 1.2 job 配置\n\n被触发构建的项目 -> 构建触发器 -> Build when a change is pushed to GitLab 勾选\n\n![](https://cdn.myshenle.top/images/202210241508278.png)\n\n往下拉，高级设置：\n\n![](https://cdn.myshenle.top/images/202210241510419.png)\n\n此处可过滤分支 `Allowed branches`\n\n## 2. Gitlab 配置\n\n### 2.1 项目配置\n\n触发构建的项目 -> Setting -> Webhooks -> Add webhook\n\n![webhook 设置](https://cdn.myshenle.top/images/202210241544320.png)\n\n\n### 异常情况\n\n如果 jenkins 和 gitlab 都在同一台服务器上，可能会弹出警告阻止添加\n\n![异常警告](https://cdn.myshenle.top/images/202210241700683.png)\n\n需要设置允许本地 webhook，修改完后需要再次 Add webhook\n\n![设置允许本地 webhook](https://cdn.myshenle.top/images/202210241549052.png)\n\n## 3. 测试\n\n模拟推送事件\n\n![推送测试](https://cdn.myshenle.top/images/202210241703013.png)\n\n![成功提示](https://cdn.myshenle.top/images/202210241702712.png)\n\n查看 Jenkins\n\n![成功运行](https://cdn.myshenle.top/images/202210241704772.png)\n\n# 参考\n\n* [Gitlab触发jenkins构建](https://blog.csdn.net/ownfire/article/details/124766548)\n","source":"_posts/Jenkins/Jenkins-Gitlab构建配置.md","raw":"---\ntitle: Jenkins-Gitlab构建配置\ncategories:\n  - 工具\n  - Jenkins\ntags:\n  - Jenkins\ndate: 2023-05-25 10:58:19\n---\n\n# 需求\n\n推送代码、合并代码即可构建应用，不需要进入页面手动点击\n\n# 步骤\n\n## 1. Jenkins 配置\n\n### 1.1 安装插件\n\ngitlab\n\n### 1.2 job 配置\n\n被触发构建的项目 -> 构建触发器 -> Build when a change is pushed to GitLab 勾选\n\n![](https://cdn.myshenle.top/images/202210241508278.png)\n\n往下拉，高级设置：\n\n![](https://cdn.myshenle.top/images/202210241510419.png)\n\n此处可过滤分支 `Allowed branches`\n\n## 2. Gitlab 配置\n\n### 2.1 项目配置\n\n触发构建的项目 -> Setting -> Webhooks -> Add webhook\n\n![webhook 设置](https://cdn.myshenle.top/images/202210241544320.png)\n\n\n### 异常情况\n\n如果 jenkins 和 gitlab 都在同一台服务器上，可能会弹出警告阻止添加\n\n![异常警告](https://cdn.myshenle.top/images/202210241700683.png)\n\n需要设置允许本地 webhook，修改完后需要再次 Add webhook\n\n![设置允许本地 webhook](https://cdn.myshenle.top/images/202210241549052.png)\n\n## 3. 测试\n\n模拟推送事件\n\n![推送测试](https://cdn.myshenle.top/images/202210241703013.png)\n\n![成功提示](https://cdn.myshenle.top/images/202210241702712.png)\n\n查看 Jenkins\n\n![成功运行](https://cdn.myshenle.top/images/202210241704772.png)\n\n# 参考\n\n* [Gitlab触发jenkins构建](https://blog.csdn.net/ownfire/article/details/124766548)\n","slug":"Jenkins-Jenkins-Gitlab构建配置","published":1,"updated":"2023-06-14T03:07:51.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib1000nm0t57yzn3hil","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>推送代码、合并代码即可构建应用，不需要进入页面手动点击</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-Jenkins-配置\"><a href=\"#1-Jenkins-配置\" class=\"headerlink\" title=\"1. Jenkins 配置\"></a>1. Jenkins 配置</h2><h3 id=\"1-1-安装插件\"><a href=\"#1-1-安装插件\" class=\"headerlink\" title=\"1.1 安装插件\"></a>1.1 安装插件</h3><p>gitlab</p>\n<h3 id=\"1-2-job-配置\"><a href=\"#1-2-job-配置\" class=\"headerlink\" title=\"1.2 job 配置\"></a>1.2 job 配置</h3><p>被触发构建的项目 -&gt; 构建触发器 -&gt; Build when a change is pushed to GitLab 勾选</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241508278.png\"></p>\n<p>往下拉，高级设置：</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241510419.png\"></p>\n<p>此处可过滤分支 <code>Allowed branches</code></p>\n<h2 id=\"2-Gitlab-配置\"><a href=\"#2-Gitlab-配置\" class=\"headerlink\" title=\"2. Gitlab 配置\"></a>2. Gitlab 配置</h2><h3 id=\"2-1-项目配置\"><a href=\"#2-1-项目配置\" class=\"headerlink\" title=\"2.1 项目配置\"></a>2.1 项目配置</h3><p>触发构建的项目 -&gt; Setting -&gt; Webhooks -&gt; Add webhook</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241544320.png\" alt=\"webhook 设置\"></p>\n<h3 id=\"异常情况\"><a href=\"#异常情况\" class=\"headerlink\" title=\"异常情况\"></a>异常情况</h3><p>如果 jenkins 和 gitlab 都在同一台服务器上，可能会弹出警告阻止添加</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241700683.png\" alt=\"异常警告\"></p>\n<p>需要设置允许本地 webhook，修改完后需要再次 Add webhook</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241549052.png\" alt=\"设置允许本地 webhook\"></p>\n<h2 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h2><p>模拟推送事件</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241703013.png\" alt=\"推送测试\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241702712.png\" alt=\"成功提示\"></p>\n<p>查看 Jenkins</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241704772.png\" alt=\"成功运行\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/ownfire/article/details/124766548\">Gitlab触发jenkins构建</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>推送代码、合并代码即可构建应用，不需要进入页面手动点击</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-Jenkins-配置\"><a href=\"#1-Jenkins-配置\" class=\"headerlink\" title=\"1. Jenkins 配置\"></a>1. Jenkins 配置</h2><h3 id=\"1-1-安装插件\"><a href=\"#1-1-安装插件\" class=\"headerlink\" title=\"1.1 安装插件\"></a>1.1 安装插件</h3><p>gitlab</p>\n<h3 id=\"1-2-job-配置\"><a href=\"#1-2-job-配置\" class=\"headerlink\" title=\"1.2 job 配置\"></a>1.2 job 配置</h3><p>被触发构建的项目 -&gt; 构建触发器 -&gt; Build when a change is pushed to GitLab 勾选</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241508278.png\"></p>\n<p>往下拉，高级设置：</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241510419.png\"></p>\n<p>此处可过滤分支 <code>Allowed branches</code></p>\n<h2 id=\"2-Gitlab-配置\"><a href=\"#2-Gitlab-配置\" class=\"headerlink\" title=\"2. Gitlab 配置\"></a>2. Gitlab 配置</h2><h3 id=\"2-1-项目配置\"><a href=\"#2-1-项目配置\" class=\"headerlink\" title=\"2.1 项目配置\"></a>2.1 项目配置</h3><p>触发构建的项目 -&gt; Setting -&gt; Webhooks -&gt; Add webhook</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241544320.png\" alt=\"webhook 设置\"></p>\n<h3 id=\"异常情况\"><a href=\"#异常情况\" class=\"headerlink\" title=\"异常情况\"></a>异常情况</h3><p>如果 jenkins 和 gitlab 都在同一台服务器上，可能会弹出警告阻止添加</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241700683.png\" alt=\"异常警告\"></p>\n<p>需要设置允许本地 webhook，修改完后需要再次 Add webhook</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241549052.png\" alt=\"设置允许本地 webhook\"></p>\n<h2 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h2><p>模拟推送事件</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241703013.png\" alt=\"推送测试\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241702712.png\" alt=\"成功提示\"></p>\n<p>查看 Jenkins</p>\n<p><img src=\"https://cdn.myshenle.top/images/202210241704772.png\" alt=\"成功运行\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/ownfire/article/details/124766548\">Gitlab触发jenkins构建</a></li>\n</ul>\n"},{"title":"Jenkins-远程构建配置","date":"2023-05-25T02:57:58.000Z","_content":"\n# 需求\n\n通过 Http 请求即可构建应用，不需要进入页面手动点击，支持参数构建\n\n# 步骤\n\n## 1. job 配置\n\n![远程构建配置](https://cdn.myshenle.top/images/202305251103963.png)\n\n## 2. 调用测试\n\n可直接在浏览器地址栏输入调用\n\n* 无参数：`JENKINS_URL/job/test/build?token=TOKEN`\n* 有参数：`JENKINS_URL/job/test/buildWithParameters?token=TOKEN&param1=value1`\n\n`JENKINS_URL` 为 Jenkins 访问地址\n\n# 配置\n\n## 匿名用户权限\n\n不需要登录即可构建，配置匿名用户的调用权限\n\n进入：系统设置 -> 全局安全配置\n\n![匿名用户权限配置](https://cdn.myshenle.top/images/202305251120076.png)\n\n# 参考\n\n* [JENKINS触发远程构建功能使用](https://www.jianshu.com/p/aa0dc1157599)\n\n","source":"_posts/Jenkins/Jenkins-远程构建配置.md","raw":"---\ntitle: Jenkins-远程构建配置\ncategories:\n  - 工具\n  - Jenkins\ntags:\n  - Jenkins\ndate: 2023-05-25 10:57:58\n---\n\n# 需求\n\n通过 Http 请求即可构建应用，不需要进入页面手动点击，支持参数构建\n\n# 步骤\n\n## 1. job 配置\n\n![远程构建配置](https://cdn.myshenle.top/images/202305251103963.png)\n\n## 2. 调用测试\n\n可直接在浏览器地址栏输入调用\n\n* 无参数：`JENKINS_URL/job/test/build?token=TOKEN`\n* 有参数：`JENKINS_URL/job/test/buildWithParameters?token=TOKEN&param1=value1`\n\n`JENKINS_URL` 为 Jenkins 访问地址\n\n# 配置\n\n## 匿名用户权限\n\n不需要登录即可构建，配置匿名用户的调用权限\n\n进入：系统设置 -> 全局安全配置\n\n![匿名用户权限配置](https://cdn.myshenle.top/images/202305251120076.png)\n\n# 参考\n\n* [JENKINS触发远程构建功能使用](https://www.jianshu.com/p/aa0dc1157599)\n\n","slug":"Jenkins-Jenkins-远程构建配置","published":1,"updated":"2023-06-14T03:07:51.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib2000pm0t5hxocek71","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过 Http 请求即可构建应用，不需要进入页面手动点击，支持参数构建</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-job-配置\"><a href=\"#1-job-配置\" class=\"headerlink\" title=\"1. job 配置\"></a>1. job 配置</h2><p><img src=\"https://cdn.myshenle.top/images/202305251103963.png\" alt=\"远程构建配置\"></p>\n<h2 id=\"2-调用测试\"><a href=\"#2-调用测试\" class=\"headerlink\" title=\"2. 调用测试\"></a>2. 调用测试</h2><p>可直接在浏览器地址栏输入调用</p>\n<ul>\n<li>无参数：<code>JENKINS_URL/job/test/build?token=TOKEN</code></li>\n<li>有参数：<code>JENKINS_URL/job/test/buildWithParameters?token=TOKEN&amp;param1=value1</code></li>\n</ul>\n<p><code>JENKINS_URL</code> 为 Jenkins 访问地址</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"匿名用户权限\"><a href=\"#匿名用户权限\" class=\"headerlink\" title=\"匿名用户权限\"></a>匿名用户权限</h2><p>不需要登录即可构建，配置匿名用户的调用权限</p>\n<p>进入：系统设置 -&gt; 全局安全配置</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251120076.png\" alt=\"匿名用户权限配置\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/aa0dc1157599\">JENKINS触发远程构建功能使用</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过 Http 请求即可构建应用，不需要进入页面手动点击，支持参数构建</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-job-配置\"><a href=\"#1-job-配置\" class=\"headerlink\" title=\"1. job 配置\"></a>1. job 配置</h2><p><img src=\"https://cdn.myshenle.top/images/202305251103963.png\" alt=\"远程构建配置\"></p>\n<h2 id=\"2-调用测试\"><a href=\"#2-调用测试\" class=\"headerlink\" title=\"2. 调用测试\"></a>2. 调用测试</h2><p>可直接在浏览器地址栏输入调用</p>\n<ul>\n<li>无参数：<code>JENKINS_URL/job/test/build?token=TOKEN</code></li>\n<li>有参数：<code>JENKINS_URL/job/test/buildWithParameters?token=TOKEN&amp;param1=value1</code></li>\n</ul>\n<p><code>JENKINS_URL</code> 为 Jenkins 访问地址</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"匿名用户权限\"><a href=\"#匿名用户权限\" class=\"headerlink\" title=\"匿名用户权限\"></a>匿名用户权限</h2><p>不需要登录即可构建，配置匿名用户的调用权限</p>\n<p>进入：系统设置 -&gt; 全局安全配置</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251120076.png\" alt=\"匿名用户权限配置\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/aa0dc1157599\">JENKINS触发远程构建功能使用</a></li>\n</ul>\n"},{"title":"Jenkins-重置管理员密码","date":"2023-05-25T01:52:37.000Z","_content":"\n# 需求\n\nJenkins admin 用户忘记密码，需要重置密码\n\n# 步骤\n\n## 1. 修改配置文件\n\n修改 Jenkins 目录的 `config.xml`文件，通常在 `~/.jenkins/config.xml`\n\n修改 `useSecurity` 字段为 `false`，然后重新启动 Jenkins。你就会发现不需要登陆也能进入管理页面。\n\n重启 Jenkins\n\n## 2. 修改 Jenkins 配置\n\n直接进入 Jenkins 后台 -> 系统管理 -> 全局安全配置\n\n此操作可出现 `管理用户` 模块\n\n![全局安全配置](https://cdn.myshenle.top/images/202305251012933.png)\n\n## 3. 修改密码\n\n直接进入 Jenkins 后台 -> 系统管理 -> 管理用户\n\n![重置用户密码](https://cdn.myshenle.top/images/202305251021368.png)\n\n恢复 `Jenkins` 配置（自动设置 `config.xml` ），重启 Jenkins，登录验证\n\n![恢复 Jenkins 配置](https://cdn.myshenle.top/images/202305251045781.png)\n\n# 参考\n\n* [Jenkins 官方](https://www.jenkins-zh.cn/tutorial/management/auth/lost-password/)\n* [Jenkins之忘记管理员账户密码重置方法](https://blog.csdn.net/carefree2005/article/details/112169302)\n","source":"_posts/Jenkins/Jenkins-重置管理员密码.md","raw":"---\ntitle: Jenkins-重置管理员密码\ncategories:\n  - 工具\n  - Jenkins\ntags:\n  - Jenkins\ndate: 2023-05-25 09:52:37\n---\n\n# 需求\n\nJenkins admin 用户忘记密码，需要重置密码\n\n# 步骤\n\n## 1. 修改配置文件\n\n修改 Jenkins 目录的 `config.xml`文件，通常在 `~/.jenkins/config.xml`\n\n修改 `useSecurity` 字段为 `false`，然后重新启动 Jenkins。你就会发现不需要登陆也能进入管理页面。\n\n重启 Jenkins\n\n## 2. 修改 Jenkins 配置\n\n直接进入 Jenkins 后台 -> 系统管理 -> 全局安全配置\n\n此操作可出现 `管理用户` 模块\n\n![全局安全配置](https://cdn.myshenle.top/images/202305251012933.png)\n\n## 3. 修改密码\n\n直接进入 Jenkins 后台 -> 系统管理 -> 管理用户\n\n![重置用户密码](https://cdn.myshenle.top/images/202305251021368.png)\n\n恢复 `Jenkins` 配置（自动设置 `config.xml` ），重启 Jenkins，登录验证\n\n![恢复 Jenkins 配置](https://cdn.myshenle.top/images/202305251045781.png)\n\n# 参考\n\n* [Jenkins 官方](https://www.jenkins-zh.cn/tutorial/management/auth/lost-password/)\n* [Jenkins之忘记管理员账户密码重置方法](https://blog.csdn.net/carefree2005/article/details/112169302)\n","slug":"Jenkins-Jenkins-重置管理员密码","published":1,"updated":"2023-06-14T03:07:51.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib3000sm0t55v4dbbk5","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Jenkins admin 用户忘记密码，需要重置密码</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h2><p>修改 Jenkins 目录的 <code>config.xml</code>文件，通常在 <code>~/.jenkins/config.xml</code></p>\n<p>修改 <code>useSecurity</code> 字段为 <code>false</code>，然后重新启动 Jenkins。你就会发现不需要登陆也能进入管理页面。</p>\n<p>重启 Jenkins</p>\n<h2 id=\"2-修改-Jenkins-配置\"><a href=\"#2-修改-Jenkins-配置\" class=\"headerlink\" title=\"2. 修改 Jenkins 配置\"></a>2. 修改 Jenkins 配置</h2><p>直接进入 Jenkins 后台 -&gt; 系统管理 -&gt; 全局安全配置</p>\n<p>此操作可出现 <code>管理用户</code> 模块</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251012933.png\" alt=\"全局安全配置\"></p>\n<h2 id=\"3-修改密码\"><a href=\"#3-修改密码\" class=\"headerlink\" title=\"3. 修改密码\"></a>3. 修改密码</h2><p>直接进入 Jenkins 后台 -&gt; 系统管理 -&gt; 管理用户</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251021368.png\" alt=\"重置用户密码\"></p>\n<p>恢复 <code>Jenkins</code> 配置（自动设置 <code>config.xml</code> ），重启 Jenkins，登录验证</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251045781.png\" alt=\"恢复 Jenkins 配置\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jenkins-zh.cn/tutorial/management/auth/lost-password/\">Jenkins 官方</a></li>\n<li><a href=\"https://blog.csdn.net/carefree2005/article/details/112169302\">Jenkins之忘记管理员账户密码重置方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Jenkins admin 用户忘记密码，需要重置密码</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h2><p>修改 Jenkins 目录的 <code>config.xml</code>文件，通常在 <code>~/.jenkins/config.xml</code></p>\n<p>修改 <code>useSecurity</code> 字段为 <code>false</code>，然后重新启动 Jenkins。你就会发现不需要登陆也能进入管理页面。</p>\n<p>重启 Jenkins</p>\n<h2 id=\"2-修改-Jenkins-配置\"><a href=\"#2-修改-Jenkins-配置\" class=\"headerlink\" title=\"2. 修改 Jenkins 配置\"></a>2. 修改 Jenkins 配置</h2><p>直接进入 Jenkins 后台 -&gt; 系统管理 -&gt; 全局安全配置</p>\n<p>此操作可出现 <code>管理用户</code> 模块</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251012933.png\" alt=\"全局安全配置\"></p>\n<h2 id=\"3-修改密码\"><a href=\"#3-修改密码\" class=\"headerlink\" title=\"3. 修改密码\"></a>3. 修改密码</h2><p>直接进入 Jenkins 后台 -&gt; 系统管理 -&gt; 管理用户</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251021368.png\" alt=\"重置用户密码\"></p>\n<p>恢复 <code>Jenkins</code> 配置（自动设置 <code>config.xml</code> ），重启 Jenkins，登录验证</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305251045781.png\" alt=\"恢复 Jenkins 配置\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jenkins-zh.cn/tutorial/management/auth/lost-password/\">Jenkins 官方</a></li>\n<li><a href=\"https://blog.csdn.net/carefree2005/article/details/112169302\">Jenkins之忘记管理员账户密码重置方法</a></li>\n</ul>\n"},{"title":"Gitlab-重置管理员密码","date":"2023-05-25T04:35:41.000Z","_content":"\n# 需求\n\nGitlab root 用户忘记密码，需要重置密码\n\n# 步骤\n\n1. 重置 root 密码之前，需先使用 root 用户登录到 gitlab 所在服务器\n    `gitlab-rails console -e production`\n2. 等待控制台加载完毕，有多种找到用户的方法\n    * 通过用户名：`user = User.find_by_username 'exampleuser'`\n    * 通过用户 ID：`user = User.find(123)`\n    * 通过 email：`user = User.find_by(email: 'user@example.com')`\n3. 输入新密码（须符合最低8位限制）：`user.password = '新密码'`\n4. 确认密码：`user.password_confirmation = '新密码'`\n5. 保存更改：`user.save!`\n6. 退出：`exit`\n7. 用新密码登录验证\n\n![详细步骤](https://cdn.myshenle.top/images/202210171421655.png)\n\n# 参考\n\n* [官方文档说明](https://docs.gitlab.com/ee/security/reset_user_password.html)\n","source":"_posts/Gitlab/Gitlab-重置管理员密码.md","raw":"---\ntitle: Gitlab-重置管理员密码\ncategories:\n  - 工具\n  - Gitlab\ntags:\n  - Gitlab\ndate: 2023-05-25 12:35:41\n---\n\n# 需求\n\nGitlab root 用户忘记密码，需要重置密码\n\n# 步骤\n\n1. 重置 root 密码之前，需先使用 root 用户登录到 gitlab 所在服务器\n    `gitlab-rails console -e production`\n2. 等待控制台加载完毕，有多种找到用户的方法\n    * 通过用户名：`user = User.find_by_username 'exampleuser'`\n    * 通过用户 ID：`user = User.find(123)`\n    * 通过 email：`user = User.find_by(email: 'user@example.com')`\n3. 输入新密码（须符合最低8位限制）：`user.password = '新密码'`\n4. 确认密码：`user.password_confirmation = '新密码'`\n5. 保存更改：`user.save!`\n6. 退出：`exit`\n7. 用新密码登录验证\n\n![详细步骤](https://cdn.myshenle.top/images/202210171421655.png)\n\n# 参考\n\n* [官方文档说明](https://docs.gitlab.com/ee/security/reset_user_password.html)\n","slug":"Gitlab-Gitlab-重置管理员密码","published":1,"updated":"2023-06-14T03:07:51.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib4000um0t50uph6dnb","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Gitlab root 用户忘记密码，需要重置密码</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>重置 root 密码之前，需先使用 root 用户登录到 gitlab 所在服务器<br> <code>gitlab-rails console -e production</code></li>\n<li>等待控制台加载完毕，有多种找到用户的方法<ul>\n<li>通过用户名：<code>user = User.find_by_username &#39;exampleuser&#39;</code></li>\n<li>通过用户 ID：<code>user = User.find(123)</code></li>\n<li>通过 email：<code>user = User.find_by(email: &#39;user@example.com&#39;)</code></li>\n</ul>\n</li>\n<li>输入新密码（须符合最低8位限制）：<code>user.password = &#39;新密码&#39;</code></li>\n<li>确认密码：<code>user.password_confirmation = &#39;新密码&#39;</code></li>\n<li>保存更改：<code>user.save!</code></li>\n<li>退出：<code>exit</code></li>\n<li>用新密码登录验证</li>\n</ol>\n<p><img src=\"https://cdn.myshenle.top/images/202210171421655.png\" alt=\"详细步骤\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.gitlab.com/ee/security/reset_user_password.html\">官方文档说明</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>Gitlab root 用户忘记密码，需要重置密码</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>重置 root 密码之前，需先使用 root 用户登录到 gitlab 所在服务器<br> <code>gitlab-rails console -e production</code></li>\n<li>等待控制台加载完毕，有多种找到用户的方法<ul>\n<li>通过用户名：<code>user = User.find_by_username &#39;exampleuser&#39;</code></li>\n<li>通过用户 ID：<code>user = User.find(123)</code></li>\n<li>通过 email：<code>user = User.find_by(email: &#39;user@example.com&#39;)</code></li>\n</ul>\n</li>\n<li>输入新密码（须符合最低8位限制）：<code>user.password = &#39;新密码&#39;</code></li>\n<li>确认密码：<code>user.password_confirmation = &#39;新密码&#39;</code></li>\n<li>保存更改：<code>user.save!</code></li>\n<li>退出：<code>exit</code></li>\n<li>用新密码登录验证</li>\n</ol>\n<p><img src=\"https://cdn.myshenle.top/images/202210171421655.png\" alt=\"详细步骤\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.gitlab.com/ee/security/reset_user_password.html\">官方文档说明</a></li>\n</ul>\n"},{"title":"Ubuntu-换源","date":"2023-05-29T17:35:41.000Z","_content":"\n# 需求\n\n下载慢\n\n# 步骤\n\n1. 备份源文件\n\n   ```bash\n   $ sudo cp /etc/apt/sources.list /etc/apt/sources_copy.list\n   ```\n\n2. 修改源\n\n   ```bash\n   $ sudo vi /etc/apt/sources.list\n   ```\n\n   参考：[清华源自助替换](https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/)。注意：版本要对应，查看版本：`lsb_release -a`\n\n3. 更新索引\n\n   ```bash\n   $ sudo apt update\n   ```\n\n# 参考\n\n* [ubuntu换源](https://blog.csdn.net/qq_45878098/article/details/126037838)\n\n","source":"_posts/Linux/Ubuntu-换源.md","raw":"---\ntitle: Ubuntu-换源\ncategories:\n  - 系统\n  - Linux\ntags:\n  - Ubuntu\ndate: 2023-05-30 01:35:41\n---\n\n# 需求\n\n下载慢\n\n# 步骤\n\n1. 备份源文件\n\n   ```bash\n   $ sudo cp /etc/apt/sources.list /etc/apt/sources_copy.list\n   ```\n\n2. 修改源\n\n   ```bash\n   $ sudo vi /etc/apt/sources.list\n   ```\n\n   参考：[清华源自助替换](https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/)。注意：版本要对应，查看版本：`lsb_release -a`\n\n3. 更新索引\n\n   ```bash\n   $ sudo apt update\n   ```\n\n# 参考\n\n* [ubuntu换源](https://blog.csdn.net/qq_45878098/article/details/126037838)\n\n","slug":"Linux-Ubuntu-换源","published":1,"updated":"2023-06-14T03:07:51.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib5000ym0t58rzb1tbc","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>下载慢</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li><p>备份源文件</p>\n<pre><code class=\"bash\">$ sudo cp /etc/apt/sources.list /etc/apt/sources_copy.list\n</code></pre>\n</li>\n<li><p>修改源</p>\n<pre><code class=\"bash\">$ sudo vi /etc/apt/sources.list\n</code></pre>\n<p>参考：<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/\">清华源自助替换</a>。注意：版本要对应，查看版本：<code>lsb_release -a</code></p>\n</li>\n<li><p>更新索引</p>\n<pre><code class=\"bash\">$ sudo apt update\n</code></pre>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_45878098/article/details/126037838\">ubuntu换源</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>下载慢</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li><p>备份源文件</p>\n<pre><code class=\"bash\">$ sudo cp /etc/apt/sources.list /etc/apt/sources_copy.list\n</code></pre>\n</li>\n<li><p>修改源</p>\n<pre><code class=\"bash\">$ sudo vi /etc/apt/sources.list\n</code></pre>\n<p>参考：<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/\">清华源自助替换</a>。注意：版本要对应，查看版本：<code>lsb_release -a</code></p>\n</li>\n<li><p>更新索引</p>\n<pre><code class=\"bash\">$ sudo apt update\n</code></pre>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_45878098/article/details/126037838\">ubuntu换源</a></li>\n</ul>\n"},{"title":"Ubuntu-离线安装包","date":"2023-05-29T17:36:50.000Z","_content":"\n# 需求\n\n离线情况下无法使用 apt install 安装包\n\n# 步骤\n\n新建一个文件夹，专门保存下载的软件包\n\n```bash\n$ mkdir offline_package\n$ cd offline_package\n```\n\n下载离线包，packagename 换成要下载包名\n\n```bash\n$ sudo apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances <packagename> | grep \"^\\w\" | sort -u)\n```\n\n修改权限，建立依赖关系\n\n```bash\n$ mkdir ./archives\n$ dpkg-scanpackages ./ /dev/null | gzip > ./archives/Packages.gz -r\n$ sudo chmod 777 -R ./\n```\n\n如果出现错误：sudo:dpkg-scanpackages: command not found，则需要安装dpkg-dev工具\n\n```bash\n$ sudo apt install dpkg-dev\n```\n\n打包文件夹\n\n```bash\n$ tar -czvf ../offline_package.tar.gz ../offline_package\n```\n\n将打包后的文件拷贝到离线服务器上并解压，比如我们放到 root 目录下\n\n```bash\n$ tar -xzvf test.tar.gz\n$ cd offline_package/archives\n$ gzip -d Packages\n```\n\n修改源\n\n```bash\n$ sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak\n$ sudo echo \"deb [trusted=yes] file:///root/offline_package/ archives/\" > /etc/apt/sources.list\n```\n\n更新源\n\n```bash\n$ sudo apt update\n```\n\n安装软件包\n\n```bash\n$ sudo apt install <packagename>\n```\n\n如果提示依赖问题，可以使用下边的命令修复\n\n```bash\n$ sudo apt install -f\n```\n\n恢复源\n\n```bash\n$ sudo mv /etc/apt/sources.list.bak /etc/apt/sources.list\n$ sudo apt update\n```\n\n\n\n# 参考\n\n* [Linux之ubuntu离线安装软件包](https://blog.csdn.net/zong596568821xp/article/details/105994450)\n","source":"_posts/Linux/Ubuntu-离线安装包.md","raw":"---\ntitle: Ubuntu-离线安装包\ncategories:\n  - 系统\n  - Linux\ntags:\n  - Ubuntu\ndate: 2023-05-30 01:36:50\n---\n\n# 需求\n\n离线情况下无法使用 apt install 安装包\n\n# 步骤\n\n新建一个文件夹，专门保存下载的软件包\n\n```bash\n$ mkdir offline_package\n$ cd offline_package\n```\n\n下载离线包，packagename 换成要下载包名\n\n```bash\n$ sudo apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances <packagename> | grep \"^\\w\" | sort -u)\n```\n\n修改权限，建立依赖关系\n\n```bash\n$ mkdir ./archives\n$ dpkg-scanpackages ./ /dev/null | gzip > ./archives/Packages.gz -r\n$ sudo chmod 777 -R ./\n```\n\n如果出现错误：sudo:dpkg-scanpackages: command not found，则需要安装dpkg-dev工具\n\n```bash\n$ sudo apt install dpkg-dev\n```\n\n打包文件夹\n\n```bash\n$ tar -czvf ../offline_package.tar.gz ../offline_package\n```\n\n将打包后的文件拷贝到离线服务器上并解压，比如我们放到 root 目录下\n\n```bash\n$ tar -xzvf test.tar.gz\n$ cd offline_package/archives\n$ gzip -d Packages\n```\n\n修改源\n\n```bash\n$ sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak\n$ sudo echo \"deb [trusted=yes] file:///root/offline_package/ archives/\" > /etc/apt/sources.list\n```\n\n更新源\n\n```bash\n$ sudo apt update\n```\n\n安装软件包\n\n```bash\n$ sudo apt install <packagename>\n```\n\n如果提示依赖问题，可以使用下边的命令修复\n\n```bash\n$ sudo apt install -f\n```\n\n恢复源\n\n```bash\n$ sudo mv /etc/apt/sources.list.bak /etc/apt/sources.list\n$ sudo apt update\n```\n\n\n\n# 参考\n\n* [Linux之ubuntu离线安装软件包](https://blog.csdn.net/zong596568821xp/article/details/105994450)\n","slug":"Linux-Ubuntu-离线安装包","published":1,"updated":"2023-06-14T03:07:51.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib60011m0t5hw0a0lwb","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>离线情况下无法使用 apt install 安装包</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>新建一个文件夹，专门保存下载的软件包</p>\n<pre><code class=\"bash\">$ mkdir offline_package\n$ cd offline_package\n</code></pre>\n<p>下载离线包，packagename 换成要下载包名</p>\n<pre><code class=\"bash\">$ sudo apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances &lt;packagename&gt; | grep &quot;^\\w&quot; | sort -u)\n</code></pre>\n<p>修改权限，建立依赖关系</p>\n<pre><code class=\"bash\">$ mkdir ./archives\n$ dpkg-scanpackages ./ /dev/null | gzip &gt; ./archives/Packages.gz -r\n$ sudo chmod 777 -R ./\n</code></pre>\n<p>如果出现错误：sudo:dpkg-scanpackages: command not found，则需要安装dpkg-dev工具</p>\n<pre><code class=\"bash\">$ sudo apt install dpkg-dev\n</code></pre>\n<p>打包文件夹</p>\n<pre><code class=\"bash\">$ tar -czvf ../offline_package.tar.gz ../offline_package\n</code></pre>\n<p>将打包后的文件拷贝到离线服务器上并解压，比如我们放到 root 目录下</p>\n<pre><code class=\"bash\">$ tar -xzvf test.tar.gz\n$ cd offline_package/archives\n$ gzip -d Packages\n</code></pre>\n<p>修改源</p>\n<pre><code class=\"bash\">$ sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak\n$ sudo echo &quot;deb [trusted=yes] file:///root/offline_package/ archives/&quot; &gt; /etc/apt/sources.list\n</code></pre>\n<p>更新源</p>\n<pre><code class=\"bash\">$ sudo apt update\n</code></pre>\n<p>安装软件包</p>\n<pre><code class=\"bash\">$ sudo apt install &lt;packagename&gt;\n</code></pre>\n<p>如果提示依赖问题，可以使用下边的命令修复</p>\n<pre><code class=\"bash\">$ sudo apt install -f\n</code></pre>\n<p>恢复源</p>\n<pre><code class=\"bash\">$ sudo mv /etc/apt/sources.list.bak /etc/apt/sources.list\n$ sudo apt update\n</code></pre>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/zong596568821xp/article/details/105994450\">Linux之ubuntu离线安装软件包</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>离线情况下无法使用 apt install 安装包</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>新建一个文件夹，专门保存下载的软件包</p>\n<pre><code class=\"bash\">$ mkdir offline_package\n$ cd offline_package\n</code></pre>\n<p>下载离线包，packagename 换成要下载包名</p>\n<pre><code class=\"bash\">$ sudo apt-get download $(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances &lt;packagename&gt; | grep &quot;^\\w&quot; | sort -u)\n</code></pre>\n<p>修改权限，建立依赖关系</p>\n<pre><code class=\"bash\">$ mkdir ./archives\n$ dpkg-scanpackages ./ /dev/null | gzip &gt; ./archives/Packages.gz -r\n$ sudo chmod 777 -R ./\n</code></pre>\n<p>如果出现错误：sudo:dpkg-scanpackages: command not found，则需要安装dpkg-dev工具</p>\n<pre><code class=\"bash\">$ sudo apt install dpkg-dev\n</code></pre>\n<p>打包文件夹</p>\n<pre><code class=\"bash\">$ tar -czvf ../offline_package.tar.gz ../offline_package\n</code></pre>\n<p>将打包后的文件拷贝到离线服务器上并解压，比如我们放到 root 目录下</p>\n<pre><code class=\"bash\">$ tar -xzvf test.tar.gz\n$ cd offline_package/archives\n$ gzip -d Packages\n</code></pre>\n<p>修改源</p>\n<pre><code class=\"bash\">$ sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak\n$ sudo echo &quot;deb [trusted=yes] file:///root/offline_package/ archives/&quot; &gt; /etc/apt/sources.list\n</code></pre>\n<p>更新源</p>\n<pre><code class=\"bash\">$ sudo apt update\n</code></pre>\n<p>安装软件包</p>\n<pre><code class=\"bash\">$ sudo apt install &lt;packagename&gt;\n</code></pre>\n<p>如果提示依赖问题，可以使用下边的命令修复</p>\n<pre><code class=\"bash\">$ sudo apt install -f\n</code></pre>\n<p>恢复源</p>\n<pre><code class=\"bash\">$ sudo mv /etc/apt/sources.list.bak /etc/apt/sources.list\n$ sudo apt update\n</code></pre>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/zong596568821xp/article/details/105994450\">Linux之ubuntu离线安装软件包</a></li>\n</ul>\n"},{"title":"散落的知识如何归化","top":1,"date":"2023-05-25T03:27:57.000Z","_content":"\n# 知识分类\n\n* 思维导图：快速查阅\n* 文章：仔细查阅\n* 卡片：永久记忆\n\n# 动力\n\n* 巧妇难为无米之炊，有好用的工具才有动力\n* 零落知识整理的快感，所有东西尽收自己手下，整整齐齐\n\n# 应用\n\n## 思维导图\n\n* 幕布：全平台同步，速度快\n* XMind：编辑丰富，速度慢\n\n## 文章\n\n好看，易用，安全，方便\n\n* Typora：全平台 markdown 编辑器\n* PicGo：图床工具\n* 七牛云：免费外链，免费的10G/月下载流量\n* 阿里云：域名\n* Hexo：博客系统\n* Github：文章空间、文章备份\n\n## 卡片\n\n* 年轮：丰富的富文本编辑卡片，Mac 生态\n* Anki：自定义卡片，全平台\n\n## 同步\n\n* 坚果云：全平台同步\n* OneDrive：全平台同步\n* iCloud：Mac 生态\n\n","source":"_posts/思考/散落的知识如何归化.md","raw":"---\ntitle: 散落的知识如何归化\ncategories:\n  - 思考\ntop: 1\ntags:\n  - 思考\ndate: 2023-05-25 11:27:57\n---\n\n# 知识分类\n\n* 思维导图：快速查阅\n* 文章：仔细查阅\n* 卡片：永久记忆\n\n# 动力\n\n* 巧妇难为无米之炊，有好用的工具才有动力\n* 零落知识整理的快感，所有东西尽收自己手下，整整齐齐\n\n# 应用\n\n## 思维导图\n\n* 幕布：全平台同步，速度快\n* XMind：编辑丰富，速度慢\n\n## 文章\n\n好看，易用，安全，方便\n\n* Typora：全平台 markdown 编辑器\n* PicGo：图床工具\n* 七牛云：免费外链，免费的10G/月下载流量\n* 阿里云：域名\n* Hexo：博客系统\n* Github：文章空间、文章备份\n\n## 卡片\n\n* 年轮：丰富的富文本编辑卡片，Mac 生态\n* Anki：自定义卡片，全平台\n\n## 同步\n\n* 坚果云：全平台同步\n* OneDrive：全平台同步\n* iCloud：Mac 生态\n\n","slug":"思考-散落的知识如何归化","published":1,"updated":"2023-06-14T03:07:51.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib70014m0t55en0bbs5","content":"<h1 id=\"知识分类\"><a href=\"#知识分类\" class=\"headerlink\" title=\"知识分类\"></a>知识分类</h1><ul>\n<li>思维导图：快速查阅</li>\n<li>文章：仔细查阅</li>\n<li>卡片：永久记忆</li>\n</ul>\n<h1 id=\"动力\"><a href=\"#动力\" class=\"headerlink\" title=\"动力\"></a>动力</h1><ul>\n<li>巧妇难为无米之炊，有好用的工具才有动力</li>\n<li>零落知识整理的快感，所有东西尽收自己手下，整整齐齐</li>\n</ul>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><ul>\n<li>幕布：全平台同步，速度快</li>\n<li>XMind：编辑丰富，速度慢</li>\n</ul>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>好看，易用，安全，方便</p>\n<ul>\n<li>Typora：全平台 markdown 编辑器</li>\n<li>PicGo：图床工具</li>\n<li>七牛云：免费外链，免费的10G&#x2F;月下载流量</li>\n<li>阿里云：域名</li>\n<li>Hexo：博客系统</li>\n<li>Github：文章空间、文章备份</li>\n</ul>\n<h2 id=\"卡片\"><a href=\"#卡片\" class=\"headerlink\" title=\"卡片\"></a>卡片</h2><ul>\n<li>年轮：丰富的富文本编辑卡片，Mac 生态</li>\n<li>Anki：自定义卡片，全平台</li>\n</ul>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><ul>\n<li>坚果云：全平台同步</li>\n<li>OneDrive：全平台同步</li>\n<li>iCloud：Mac 生态</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"知识分类\"><a href=\"#知识分类\" class=\"headerlink\" title=\"知识分类\"></a>知识分类</h1><ul>\n<li>思维导图：快速查阅</li>\n<li>文章：仔细查阅</li>\n<li>卡片：永久记忆</li>\n</ul>\n<h1 id=\"动力\"><a href=\"#动力\" class=\"headerlink\" title=\"动力\"></a>动力</h1><ul>\n<li>巧妇难为无米之炊，有好用的工具才有动力</li>\n<li>零落知识整理的快感，所有东西尽收自己手下，整整齐齐</li>\n</ul>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><ul>\n<li>幕布：全平台同步，速度快</li>\n<li>XMind：编辑丰富，速度慢</li>\n</ul>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><p>好看，易用，安全，方便</p>\n<ul>\n<li>Typora：全平台 markdown 编辑器</li>\n<li>PicGo：图床工具</li>\n<li>七牛云：免费外链，免费的10G&#x2F;月下载流量</li>\n<li>阿里云：域名</li>\n<li>Hexo：博客系统</li>\n<li>Github：文章空间、文章备份</li>\n</ul>\n<h2 id=\"卡片\"><a href=\"#卡片\" class=\"headerlink\" title=\"卡片\"></a>卡片</h2><ul>\n<li>年轮：丰富的富文本编辑卡片，Mac 生态</li>\n<li>Anki：自定义卡片，全平台</li>\n</ul>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><ul>\n<li>坚果云：全平台同步</li>\n<li>OneDrive：全平台同步</li>\n<li>iCloud：Mac 生态</li>\n</ul>\n"},{"title":"post","date":"2023-06-14T03:31:54.000Z","_content":"","source":"_posts/2023/06/post-1.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:31:54\n---\n","slug":"post-1","published":1,"updated":"2023-06-14T03:31:54.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib80018m0t5aos1cu5b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"VSCode-设置","date":"2023-05-25T04:35:41.000Z","_content":"\n# 快捷打开目录\n\n![安装命令](https://cdn.myshenle.top/images/202305262206759.png)\n\n使用：命令行输入 `code 需要打开的目录` ，即可快速通过 VSCode 打开目录\n","source":"_posts/VSCode/VSCode-设置.md","raw":"---\ntitle: VSCode-设置\ncategories:\n  - 工具\n  - VSCode\ntags:\n  - VSCode\ndate: 2023-05-25 12:35:41\n---\n\n# 快捷打开目录\n\n![安装命令](https://cdn.myshenle.top/images/202305262206759.png)\n\n使用：命令行输入 `code 需要打开的目录` ，即可快速通过 VSCode 打开目录\n","slug":"VSCode-VSCode-设置","published":1,"updated":"2023-06-14T03:07:51.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sib9001bm0t5bn4wd495","content":"<h1 id=\"快捷打开目录\"><a href=\"#快捷打开目录\" class=\"headerlink\" title=\"快捷打开目录\"></a>快捷打开目录</h1><p><img src=\"https://cdn.myshenle.top/images/202305262206759.png\" alt=\"安装命令\"></p>\n<p>使用：命令行输入 <code>code 需要打开的目录</code> ，即可快速通过 VSCode 打开目录</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"快捷打开目录\"><a href=\"#快捷打开目录\" class=\"headerlink\" title=\"快捷打开目录\"></a>快捷打开目录</h1><p><img src=\"https://cdn.myshenle.top/images/202305262206759.png\" alt=\"安装命令\"></p>\n<p>使用：命令行输入 <code>code 需要打开的目录</code> ，即可快速通过 VSCode 打开目录</p>\n"},{"title":"post","date":"2023-06-14T03:32:07.000Z","_content":"","source":"_posts/2023/06/post-2.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:32:07\n---\n","slug":"post-2","published":1,"updated":"2023-06-14T03:32:07.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siba001fm0t59hwt7nvw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"post","date":"2023-06-14T03:32:15.000Z","_content":"","source":"_posts/2023/06/post-3.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:32:15\n---\n","slug":"post-3","published":1,"updated":"2023-06-14T03:32:15.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5siba001hm0t51tsxdpp9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"post","date":"2023-06-14T03:31:35.000Z","_content":"","source":"_posts/2023/06/post.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:31:35\n---\n","slug":"post","published":1,"updated":"2023-06-14T03:31:35.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sibb001mm0t54z5q4o76","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"post","date":"2023-06-14T03:33:50.000Z","_content":"","source":"_posts/2023/06/post-4.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:33:50\n---\n","slug":"post-4","published":1,"updated":"2023-06-14T03:33:50.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sibc001om0t5e6qn6qnv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"post","date":"2023-06-14T03:33:56.000Z","_content":"","source":"_posts/2023/06/post-5.md","raw":"---\ntitle: post\ncategories:\n  - 工具\ntags:\n  - hexo\n  - 3-hexo\ndate: 2023-06-14 11:33:56\n---\n","slug":"post-5","published":1,"updated":"2023-06-14T03:33:56.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sibd001tm0t50s39ggqn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"王国之泪-龙之泪收集","date":"2023-05-31T04:29:51.000Z","_content":"\n# 龙之泪收集顺序\n\n按顺序收集，剧情无割裂感\n\n![龙之泪收集顺序](https://cdn.myshenle.top/images/202305311232154.jpeg)\n\n先去附近找英帕二人组（村子或图案附近），告诉附近有图案，再去解锁龙之泪。\n\n# 龙之泪分配图\n\n做完12个龙之泪会给你触发第13个，回忆完后塞尔达会在天上，传送到最近的传送塔往下飞到塞尔达身上就行了(回忆完后先标记一下龙的位置更好找)然后拔剑就行了(要保证两圈体力，也就是包括初始的额外一圈，不够的去避难所接扫地任务找到恶魔神像换，黄色的体力不算)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311236822.jpg)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311237831.jpg)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311237035.jpg)\n","source":"_posts/游戏/塞尔达王国之泪/王国之泪-龙之泪收集.md","raw":"---\ntitle: 王国之泪-龙之泪收集\ncategories:\n  - 游戏\ntags:\n  - 王国之泪\n  - 游戏攻略\ndate: 2023-05-31 12:29:51\n---\n\n# 龙之泪收集顺序\n\n按顺序收集，剧情无割裂感\n\n![龙之泪收集顺序](https://cdn.myshenle.top/images/202305311232154.jpeg)\n\n先去附近找英帕二人组（村子或图案附近），告诉附近有图案，再去解锁龙之泪。\n\n# 龙之泪分配图\n\n做完12个龙之泪会给你触发第13个，回忆完后塞尔达会在天上，传送到最近的传送塔往下飞到塞尔达身上就行了(回忆完后先标记一下龙的位置更好找)然后拔剑就行了(要保证两圈体力，也就是包括初始的额外一圈，不够的去避难所接扫地任务找到恶魔神像换，黄色的体力不算)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311236822.jpg)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311237831.jpg)\n\n![塞尔达传说王国之泪龙之泪位置大全](https://cdn.myshenle.top/images/202305311237035.jpg)\n","slug":"游戏-塞尔达王国之泪-王国之泪-龙之泪收集","published":1,"updated":"2023-06-14T03:07:51.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cliv5sibf001vm0t535278u7t","content":"<h1 id=\"龙之泪收集顺序\"><a href=\"#龙之泪收集顺序\" class=\"headerlink\" title=\"龙之泪收集顺序\"></a>龙之泪收集顺序</h1><p>按顺序收集，剧情无割裂感</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311232154.jpeg\" alt=\"龙之泪收集顺序\"></p>\n<p>先去附近找英帕二人组（村子或图案附近），告诉附近有图案，再去解锁龙之泪。</p>\n<h1 id=\"龙之泪分配图\"><a href=\"#龙之泪分配图\" class=\"headerlink\" title=\"龙之泪分配图\"></a>龙之泪分配图</h1><p>做完12个龙之泪会给你触发第13个，回忆完后塞尔达会在天上，传送到最近的传送塔往下飞到塞尔达身上就行了(回忆完后先标记一下龙的位置更好找)然后拔剑就行了(要保证两圈体力，也就是包括初始的额外一圈，不够的去避难所接扫地任务找到恶魔神像换，黄色的体力不算)</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311236822.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311237831.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311237035.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"龙之泪收集顺序\"><a href=\"#龙之泪收集顺序\" class=\"headerlink\" title=\"龙之泪收集顺序\"></a>龙之泪收集顺序</h1><p>按顺序收集，剧情无割裂感</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311232154.jpeg\" alt=\"龙之泪收集顺序\"></p>\n<p>先去附近找英帕二人组（村子或图案附近），告诉附近有图案，再去解锁龙之泪。</p>\n<h1 id=\"龙之泪分配图\"><a href=\"#龙之泪分配图\" class=\"headerlink\" title=\"龙之泪分配图\"></a>龙之泪分配图</h1><p>做完12个龙之泪会给你触发第13个，回忆完后塞尔达会在天上，传送到最近的传送塔往下飞到塞尔达身上就行了(回忆完后先标记一下龙的位置更好找)然后拔剑就行了(要保证两圈体力，也就是包括初始的额外一圈，不够的去避难所接扫地任务找到恶魔神像换，黄色的体力不算)</p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311236822.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311237831.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n<p><img src=\"https://cdn.myshenle.top/images/202305311237035.jpg\" alt=\"塞尔达传说王国之泪龙之泪位置大全\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cliv5siau0006m0t51jzhf4g3","category_id":"cliv5sias0003m0t59wpk5zg2","_id":"cliv5sib5000wm0t50et98zm2"},{"post_id":"cliv5siau0006m0t51jzhf4g3","category_id":"cliv5sib1000km0t51akta1of","_id":"cliv5sib6000zm0t5evv071ch"},{"post_id":"cliv5siao0001m0t58b8kca9h","category_id":"cliv5sias0003m0t59wpk5zg2","_id":"cliv5sib60013m0t51d1v5ieg"},{"post_id":"cliv5siao0001m0t58b8kca9h","category_id":"cliv5sib1000km0t51akta1of","_id":"cliv5sib80016m0t5ha295960"},{"post_id":"cliv5siau0007m0t5693152gt","category_id":"cliv5sias0003m0t59wpk5zg2","_id":"cliv5sib80019m0t54m4d9j4i"},{"post_id":"cliv5siau0007m0t5693152gt","category_id":"cliv5sib1000km0t51akta1of","_id":"cliv5sib9001dm0t5ghbk3bbs"},{"post_id":"cliv5siaw000bm0t5gykx3mjr","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5siba001gm0t5aqxkbgy2"},{"post_id":"cliv5siaw000bm0t5gykx3mjr","category_id":"cliv5sib60012m0t5565dbpsn","_id":"cliv5sibb001km0t5ctoj9m4a"},{"post_id":"cliv5sib80018m0t5aos1cu5b","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibc001nm0t5eoa3fl2w"},{"post_id":"cliv5siba001fm0t59hwt7nvw","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibd001rm0t50bsm7ieh"},{"post_id":"cliv5siar0002m0t5bn4d93je","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibe001um0t5b68m377p"},{"post_id":"cliv5siar0002m0t5bn4d93je","category_id":"cliv5sib8001am0t55xxifszq","_id":"cliv5sibf001ym0t59gkq9pwm"},{"post_id":"cliv5siba001hm0t51tsxdpp9","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibg0020m0t5c8gh2vj9"},{"post_id":"cliv5sibb001mm0t54z5q4o76","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibg0023m0t52lb6cug2"},{"post_id":"cliv5siaw000dm0t5epbicl36","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibh0025m0t5712feotx"},{"post_id":"cliv5siaw000dm0t5epbicl36","category_id":"cliv5sib60012m0t5565dbpsn","_id":"cliv5sibj0028m0t52ny41m07"},{"post_id":"cliv5sibc001om0t5e6qn6qnv","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibj002am0t5dnhc5d53"},{"post_id":"cliv5sibd001tm0t50s39ggqn","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibj002cm0t5al707elp"},{"post_id":"cliv5siay000hm0t5azeo64r3","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibj002fm0t5arck5b77"},{"post_id":"cliv5siay000hm0t5azeo64r3","category_id":"cliv5sib60012m0t5565dbpsn","_id":"cliv5sibk002hm0t515ds387o"},{"post_id":"cliv5siat0005m0t5d9oi9qjp","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibk002jm0t51bq63dff"},{"post_id":"cliv5siat0005m0t5d9oi9qjp","category_id":"cliv5sib60012m0t5565dbpsn","_id":"cliv5sibk002mm0t53px3bgtl"},{"post_id":"cliv5sib0000jm0t5ad3gfe5e","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibl002pm0t55n5p2hxs"},{"post_id":"cliv5sib0000jm0t5ad3gfe5e","category_id":"cliv5sibg0021m0t541kqgrxv","_id":"cliv5sibl002sm0t53lno5o4t"},{"post_id":"cliv5sib1000nm0t57yzn3hil","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibl002um0t58a386ifl"},{"post_id":"cliv5sib1000nm0t57yzn3hil","category_id":"cliv5sibg0021m0t541kqgrxv","_id":"cliv5sibl002xm0t56h1a798o"},{"post_id":"cliv5sib2000pm0t5hxocek71","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibm0030m0t5f644gru1"},{"post_id":"cliv5sib2000pm0t5hxocek71","category_id":"cliv5sibg0021m0t541kqgrxv","_id":"cliv5sibm0033m0t53pg0c1ib"},{"post_id":"cliv5sib3000sm0t55v4dbbk5","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibn0036m0t58ic4d663"},{"post_id":"cliv5sib3000sm0t55v4dbbk5","category_id":"cliv5sibg0021m0t541kqgrxv","_id":"cliv5sibn0038m0t57bqxelg6"},{"post_id":"cliv5sib4000um0t50uph6dnb","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibo003cm0t5b5c07gj4"},{"post_id":"cliv5sib4000um0t50uph6dnb","category_id":"cliv5sibk002lm0t5fvms3t57","_id":"cliv5sibo003em0t5d2nxclfi"},{"post_id":"cliv5sib70014m0t55en0bbs5","category_id":"cliv5sibm0032m0t5d4pg49jr","_id":"cliv5sibo003im0t56ymhh4zb"},{"post_id":"cliv5sib9001bm0t5bn4wd495","category_id":"cliv5siav0008m0t5hgdhddak","_id":"cliv5sibp003lm0t5ad528ycv"},{"post_id":"cliv5sib9001bm0t5bn4wd495","category_id":"cliv5sibn0039m0t510ub05yc","_id":"cliv5sibp003om0t582c20i0n"},{"post_id":"cliv5sibf001vm0t535278u7t","category_id":"cliv5sibo003gm0t543kb2dsd","_id":"cliv5sibq003pm0t531h4gh8g"},{"post_id":"cliv5sib5000ym0t58rzb1tbc","category_id":"cliv5sibl002rm0t54rtzcj7z","_id":"cliv5sibq003tm0t51x2k5tg8"},{"post_id":"cliv5sib5000ym0t58rzb1tbc","category_id":"cliv5sibp003mm0t5ed23584e","_id":"cliv5sibq003um0t50uwc2e2b"},{"post_id":"cliv5sib60011m0t5hw0a0lwb","category_id":"cliv5sibl002rm0t54rtzcj7z","_id":"cliv5sibq003vm0t595qvh1yl"},{"post_id":"cliv5sib60011m0t5hw0a0lwb","category_id":"cliv5sibp003mm0t5ed23584e","_id":"cliv5sibq003wm0t544id71iy"}],"PostTag":[{"post_id":"cliv5siau0006m0t51jzhf4g3","tag_id":"cliv5siat0004m0t57ysib2ag","_id":"cliv5siav000am0t5d0w5cmum"},{"post_id":"cliv5siao0001m0t58b8kca9h","tag_id":"cliv5siat0004m0t57ysib2ag","_id":"cliv5siaw000cm0t56z7ddxva"},{"post_id":"cliv5siau0007m0t5693152gt","tag_id":"cliv5siat0004m0t57ysib2ag","_id":"cliv5siay000gm0t5dh4pcqqt"},{"post_id":"cliv5siar0002m0t5bn4d93je","tag_id":"cliv5siav0009m0t59b57amy0","_id":"cliv5sib0000im0t57x0m2u7j"},{"post_id":"cliv5siay000hm0t5azeo64r3","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sib1000mm0t5a938ct88"},{"post_id":"cliv5siat0005m0t5d9oi9qjp","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sib2000om0t57h77gfls"},{"post_id":"cliv5siaw000bm0t5gykx3mjr","tag_id":"cliv5sib1000lm0t56a5t0ozh","_id":"cliv5sib4000tm0t566cfc8c7"},{"post_id":"cliv5siaw000dm0t5epbicl36","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sib60010m0t58354ekoy"},{"post_id":"cliv5sib0000jm0t5ad3gfe5e","tag_id":"cliv5sib5000xm0t58g325z2s","_id":"cliv5sib80017m0t5dyw7dcrt"},{"post_id":"cliv5sib1000nm0t57yzn3hil","tag_id":"cliv5sib5000xm0t58g325z2s","_id":"cliv5sib9001em0t5c91kgj0z"},{"post_id":"cliv5sib2000pm0t5hxocek71","tag_id":"cliv5sib5000xm0t58g325z2s","_id":"cliv5sibb001lm0t5gaax5yrl"},{"post_id":"cliv5sib3000sm0t55v4dbbk5","tag_id":"cliv5sib5000xm0t58g325z2s","_id":"cliv5sibd001sm0t595t7btaj"},{"post_id":"cliv5sib4000um0t50uph6dnb","tag_id":"cliv5sibc001qm0t5ehnick9k","_id":"cliv5sibg001zm0t5b3qsan37"},{"post_id":"cliv5sib5000ym0t58rzb1tbc","tag_id":"cliv5sibf001xm0t51yoa0ubs","_id":"cliv5sibg0024m0t53d70eegj"},{"post_id":"cliv5sib60011m0t5hw0a0lwb","tag_id":"cliv5sibf001xm0t51yoa0ubs","_id":"cliv5sibj0029m0t5a3hldw1z"},{"post_id":"cliv5sib70014m0t55en0bbs5","tag_id":"cliv5sibh0027m0t54q0r5c3i","_id":"cliv5sibj002em0t50rgp4hp0"},{"post_id":"cliv5sib80018m0t5aos1cu5b","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibk002km0t5fmqx2n9l"},{"post_id":"cliv5sib80018m0t5aos1cu5b","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibk002nm0t5dj2y93vy"},{"post_id":"cliv5sib9001bm0t5bn4wd495","tag_id":"cliv5sibk002im0t543xwayh8","_id":"cliv5sibl002qm0t57e5uaqyu"},{"post_id":"cliv5siba001fm0t59hwt7nvw","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibl002vm0t5hc8m7i5o"},{"post_id":"cliv5siba001fm0t59hwt7nvw","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibm002ym0t5eyiqgoel"},{"post_id":"cliv5siba001hm0t51tsxdpp9","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibm0031m0t56pjx1uq5"},{"post_id":"cliv5siba001hm0t51tsxdpp9","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibm0034m0t51zecd45r"},{"post_id":"cliv5sibb001mm0t54z5q4o76","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibn0037m0t5516v9q85"},{"post_id":"cliv5sibb001mm0t54z5q4o76","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibn003am0t5awsg4ozc"},{"post_id":"cliv5sibc001om0t5e6qn6qnv","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibo003dm0t55ub46uxp"},{"post_id":"cliv5sibc001om0t5e6qn6qnv","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibo003fm0t594cle043"},{"post_id":"cliv5sibd001tm0t50s39ggqn","tag_id":"cliv5siax000fm0t57isyasix","_id":"cliv5sibp003jm0t5d1zzdz57"},{"post_id":"cliv5sibd001tm0t50s39ggqn","tag_id":"cliv5sibj002dm0t5ftevhoey","_id":"cliv5sibp003km0t52h3w23u0"},{"post_id":"cliv5sibf001vm0t535278u7t","tag_id":"cliv5sibo003hm0t50w93fdtg","_id":"cliv5sibq003rm0t55q0d69j4"},{"post_id":"cliv5sibf001vm0t535278u7t","tag_id":"cliv5sibp003nm0t5g3d90sss","_id":"cliv5sibq003sm0t544wo0pe0"}],"Tag":[{"name":"C","_id":"cliv5siat0004m0t57ysib2ag"},{"name":"Git","_id":"cliv5siav0009m0t59b57amy0"},{"name":"hexo","_id":"cliv5siax000fm0t57isyasix"},{"name":"Hexo","_id":"cliv5sib1000lm0t56a5t0ozh"},{"name":"Jenkins","_id":"cliv5sib5000xm0t58g325z2s"},{"name":"Gitlab","_id":"cliv5sibc001qm0t5ehnick9k"},{"name":"Ubuntu","_id":"cliv5sibf001xm0t51yoa0ubs"},{"name":"思考","_id":"cliv5sibh0027m0t54q0r5c3i"},{"name":"3-hexo","_id":"cliv5sibj002dm0t5ftevhoey"},{"name":"VSCode","_id":"cliv5sibk002im0t543xwayh8"},{"name":"王国之泪","_id":"cliv5sibo003hm0t50w93fdtg"},{"name":"游戏攻略","_id":"cliv5sibp003nm0t5g3d90sss"}]}}